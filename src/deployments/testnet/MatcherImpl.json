{
  "address": "0xC0081CFa604111cd57027D8D6A5aB27078670436",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IGlobalCore",
          "name": "globalCore_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "peerId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "contract IDeal",
          "name": "deal",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "computeUnitId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dealCreationBlock",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct CIDV1",
          "name": "appCID",
          "type": "tuple"
        }
      ],
      "name": "ComputePeerMatched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "computeProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minPricePerEpoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct CIDV1[]",
          "name": "effectors",
          "type": "tuple[]"
        }
      ],
      "name": "ComputeProviderRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "computeProvider",
          "type": "address"
        }
      ],
      "name": "ComputeProviderRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "computeProvider",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct CIDV1",
          "name": "effector",
          "type": "tuple"
        }
      ],
      "name": "EffectorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "computeProvider",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct CIDV1",
          "name": "effector",
          "type": "tuple"
        }
      ],
      "name": "EffectorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "computeProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxCollateral",
          "type": "uint256"
        }
      ],
      "name": "MaxCollateralChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "computeProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinPricePerEpoch",
          "type": "uint256"
        }
      ],
      "name": "MinPricePerEpochChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "computeProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "newPaymentToken",
          "type": "address"
        }
      ],
      "name": "PaymentTokenChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "peerId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newWorkerSlots",
          "type": "uint256"
        }
      ],
      "name": "WorkersSlotsChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_globalCore",
      "outputs": [
        {
          "internalType": "contract IGlobalCore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CIDV1",
          "name": "effector",
          "type": "tuple"
        }
      ],
      "name": "addEffector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "peerId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "workerSlots",
          "type": "uint256"
        }
      ],
      "name": "addWorkersSlots",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxCollateral",
          "type": "uint256"
        }
      ],
      "name": "changeMaxCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinPricePerEpoch",
          "type": "uint256"
        }
      ],
      "name": "changeMinPricePerEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "newPaymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newMaxCollateral",
          "type": "uint256"
        }
      ],
      "name": "changePaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDeal",
          "name": "deal",
          "type": "address"
        }
      ],
      "name": "findComputePeers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "computeProviders",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[][]",
          "name": "computePeers",
          "type": "bytes32[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "peerId",
          "type": "bytes32"
        }
      ],
      "name": "getFreeWorkersSolts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDeal",
          "name": "deal",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "providers",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[][]",
          "name": "peers",
          "type": "bytes32[][]"
        }
      ],
      "name": "matchDeal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minPricePerEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCollateral",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CIDV1[]",
          "name": "effectors",
          "type": "tuple[]"
        }
      ],
      "name": "registerComputeProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeComputeProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CIDV1",
          "name": "effector",
          "type": "tuple"
        }
      ],
      "name": "removeEffector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "peerId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "workerSlots",
          "type": "uint256"
        }
      ],
      "name": "subWorkersSlots",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1fad0ab9135f2b42dcb91944c7f402e44ce28d3b8cb677d231a9944af290ef81",
  "receipt": {
    "to": null,
    "from": "0x627e730fd1361E6FFcee236DAc08F82EAa8ac7cD",
    "contractAddress": "0xC0081CFa604111cd57027D8D6A5aB27078670436",
    "transactionIndex": 0,
    "gasUsed": "3047934",
    "logsBloom": "0x
    "blockHash": "0x4e2d6458e67d0679491a15b0cd0c3edcdb2107132b5dccb4a98daf08ed80df0f",
    "transactionHash": "0x1fad0ab9135f2b42dcb91944c7f402e44ce28d3b8cb677d231a9944af290ef81",
    "logs": [],
    "blockNumber": 60,
    "cumulativeGasUsed": "3047934",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xea6777e8c011E7968605fd012A9Dd49401ec386C"
  ],
  "numDeployments": 1,
  "solcInputHash": "a7bbee205c1829787e2ecc0342dbecf9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IGlobalCore\",\"name\":\"globalCore_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IDeal\",\"name\":\"deal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"computeUnitId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dealCreationBlock\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct CIDV1\",\"name\":\"appCID\",\"type\":\"tuple\"}],\"name\":\"ComputePeerMatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"computeProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPricePerEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct CIDV1[]\",\"name\":\"effectors\",\"type\":\"tuple[]\"}],\"name\":\"ComputeProviderRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"computeProvider\",\"type\":\"address\"}],\"name\":\"ComputeProviderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"computeProvider\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct CIDV1\",\"name\":\"effector\",\"type\":\"tuple\"}],\"name\":\"EffectorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"computeProvider\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct CIDV1\",\"name\":\"effector\",\"type\":\"tuple\"}],\"name\":\"EffectorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"computeProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxCollateral\",\"type\":\"uint256\"}],\"name\":\"MaxCollateralChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"computeProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinPricePerEpoch\",\"type\":\"uint256\"}],\"name\":\"MinPricePerEpochChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"computeProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"newPaymentToken\",\"type\":\"address\"}],\"name\":\"PaymentTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWorkerSlots\",\"type\":\"uint256\"}],\"name\":\"WorkersSlotsChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_globalCore\",\"outputs\":[{\"internalType\":\"contract IGlobalCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct CIDV1\",\"name\":\"effector\",\"type\":\"tuple\"}],\"name\":\"addEffector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"workerSlots\",\"type\":\"uint256\"}],\"name\":\"addWorkersSlots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxCollateral\",\"type\":\"uint256\"}],\"name\":\"changeMaxCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinPricePerEpoch\",\"type\":\"uint256\"}],\"name\":\"changeMinPricePerEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"newPaymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newMaxCollateral\",\"type\":\"uint256\"}],\"name\":\"changePaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDeal\",\"name\":\"deal\",\"type\":\"address\"}],\"name\":\"findComputePeers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"computeProviders\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"computePeers\",\"type\":\"bytes32[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"}],\"name\":\"getFreeWorkersSolts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDeal\",\"name\":\"deal\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"providers\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"peers\",\"type\":\"bytes32[][]\"}],\"name\":\"matchDeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minPricePerEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCollateral\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct CIDV1[]\",\"name\":\"effectors\",\"type\":\"tuple[]\"}],\"name\":\"registerComputeProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeComputeProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct CIDV1\",\"name\":\"effector\",\"type\":\"tuple\"}],\"name\":\"removeEffector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"workerSlots\",\"type\":\"uint256\"}],\"name\":\"subWorkersSlots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/global/matcher/Matcher.sol\":\"Matcher\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/deal/base/Types.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nstruct CIDV1 {\\n    bytes4 prefixes;\\n    bytes32 hash;\\n}\\n\",\"keccak256\":\"0x9b0d5e06acd11ddf64e328e8303e29d1c30b4983b7684ab6121effd804c89e6e\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IConfig.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../base/Types.sol\\\";\\n\\ninterface IConfig {\\n    // ------------------ Types ------------------\\n    enum AccessType {\\n        NONE,\\n        WHITELIST,\\n        BLACKLIST\\n    }\\n\\n    // ------------------ Events ------------------\\n    event AppCIDChanged(CIDV1 newAppCID);\\n\\n    // ------------------ View Functions ---------------------\\n    // function globalCore() external view returns (address);\\n\\n    function paymentToken() external view returns (IERC20);\\n\\n    function fluenceToken() external view returns (IERC20);\\n\\n    function creationBlock() external view returns (uint256);\\n\\n    function pricePerWorkerEpoch() external view returns (uint256);\\n\\n    function targetWorkers() external view returns (uint256);\\n\\n    function collateralPerWorker() external view returns (uint256);\\n\\n    function minWorkers() external view returns (uint256);\\n\\n    function effectors() external view returns (CIDV1[] memory);\\n\\n    function accessType() external view returns (AccessType);\\n\\n    function isInAccessList(address addr) external view returns (bool);\\n\\n    function getAccessList() external view returns (address[] memory);\\n\\n    function appCID() external view returns (CIDV1 memory);\\n\\n    function maxWorkersPerProvider() external view returns (uint256);\\n\\n    // ------------------ Mutable Functions ------------------\\n    function setAppCID(CIDV1 calldata appCID_) external;\\n\\n    function changeAccessType(AccessType accessType_) external;\\n\\n    function removeFromAccessList(address addr) external;\\n}\\n\",\"keccak256\":\"0xea76738cda167fd3c570e8d500e0b55bd5f46058715a02cfa150c0f9e79acdf1\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IDeal.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IConfig.sol\\\";\\nimport \\\"./IWorkerManager.sol\\\";\\nimport \\\"./IStatusController.sol\\\";\\n\\ninterface IDeal is IConfig, IStatusController, IWorkerManager {\\n    // ----------------- Events -----------------\\n    event Deposited(uint256 amount);\\n    event Withdrawn(uint256 amount);\\n\\n    event RewardWithdrawn(bytes32 computeUnitId, uint256 reward);\\n\\n    // ------------------ Init ------------------\\n    function initialize(\\n        IERC20 paymentToken_,\\n        uint256 collateralPerWorker_,\\n        uint256 minWorkers_,\\n        uint256 targetWorkers_,\\n        uint256 maxWorkersPerProvider_,\\n        uint256 pricePerWorkerEpoch_,\\n        CIDV1[] calldata effectors_,\\n        IConfig.AccessType accessType_,\\n        address[] calldata accessList_,\\n        address owner_\\n    ) external;\\n\\n    // ------------------ Public Ownable Functions ------------------\\n    function deposit(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    // ------------------ Public View Functions ------------------\\n    function getStatus() external view returns (Status);\\n\\n    function getFreeBalance() external view returns (uint256);\\n\\n    function getRewardAmount(bytes32 computeUnitId) external view returns (uint);\\n\\n    // ------------------ Public Mutable Functions ------------------\\n    function withdrawRewards(bytes32 computeUnitId) external;\\n}\\n\",\"keccak256\":\"0xf649ca3ae6f7273bc7821ff45d78043b0303b46e38fa33ed9d7598f314b81053\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IStatusController.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\ninterface IStatusController {\\n    // ------------------ Types ------------------\\n    enum Status {\\n        INACTIVE,\\n        ACTIVE,\\n        ENDED\\n    }\\n\\n    // ------------------ Views ------------------\\n    function getCommittedStatus() external view returns (Status);\\n\\n    function startedEpoch() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x4a84cc0381e98583b241a476a7e2fb62f2f21388b35fff89f4da34d2ef9399a5\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IWorkerManager.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../utils/LinkedListWithUniqueKeys.sol\\\";\\n\\ninterface IWorkerManager {\\n    // ------------------ Types ------------------\\n    struct ComputeUnit {\\n        bytes32 id;\\n        bytes32 peerId;\\n        bytes32 workerId;\\n        address owner;\\n        uint256 collateral;\\n        uint256 created;\\n    }\\n\\n    // ------------------ Events ------------------\\n    event ComputeUnitCreated(bytes32 id, address owner);\\n    event ComputeUnitRemoved(bytes32 id);\\n\\n    event WorkerIdUpdated(bytes32 computeUnitId, bytes32 workerId);\\n    event WorkerRemoved(bytes32 computeUnitId);\\n\\n    event CollateralWithdrawn(address owner, uint256 amount);\\n\\n    // ------------------ Public View Functions ---------------------\\n    function getComputeUnit(bytes32 id) external view returns (ComputeUnit memory);\\n\\n    function getComputeUnitCount() external view returns (uint256);\\n\\n    function getComputeUnits() external view returns (ComputeUnit[] memory);\\n\\n    function getUnlockCollateralEpoch(bytes32 computeUnitId) external view returns (uint256);\\n\\n    // ------------------ Public Mutable Functions ---------------------\\n    function createComputeUnit(address computeProvider, bytes32 peerId) external returns (bytes32);\\n\\n    function removeComputeUnit(bytes32 computeUnitId) external;\\n\\n    function setWorker(bytes32 computeUnitId, bytes32 workerId) external;\\n\\n    function withdrawCollateral(bytes32 computeUnitId) external;\\n}\\n\",\"keccak256\":\"0xc69963c408081863853d90639fe02ba71ab18a35a5090be92a6a683142507d80\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IDealFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../deal/base/Types.sol\\\";\\nimport \\\"../../deal/interfaces/IDeal.sol\\\";\\n\\ninterface IDealFactory {\\n    // ----------------- Events -----------------\\n    event DealCreated(address indexed owner, IDeal deal, uint createdAtEpoch);\\n\\n    // ----------------- View -----------------\\n    function hasDeal(IDeal deal) external view returns (bool);\\n\\n    // ----------------- Mutable -----------------\\n    function deployDeal(\\n        IERC20 paymentToken_,\\n        uint256 collateralPerWorker_,\\n        uint256 minWorkers_,\\n        uint256 targetWorkers_,\\n        uint256 maxWorkersPerProvider_,\\n        uint256 pricePerWorkerEpoch_,\\n        CIDV1[] calldata effectors_,\\n        IDeal.AccessType accessType_,\\n        address[] calldata accessList_\\n    ) external returns (IDeal);\\n}\\n\",\"keccak256\":\"0x5cc5b62388d585ccd176c130bbd80663931fe325c56f5c5d127d25caad128aea\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IGlobalCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IDealFactory.sol\\\";\\nimport \\\"../matcher/interfaces/IMatcher.sol\\\";\\n\\npragma solidity ^0.8.19;\\n\\ninterface IGlobalCore {\\n    // ------------------ Events ------------------\\n    event MatcherSet(address matcher);\\n    event FactorySet(address factory);\\n\\n    // ------------------ Initializer ------------------\\n    function initialize(IERC20 fluenceToken_, uint256 epochDuration_) external;\\n\\n    // ------------------ external View Functions ------------------\\n    function currentEpoch() external view returns (uint256);\\n\\n    function epochDuration() external view returns (uint256);\\n\\n    function fluenceToken() external view returns (IERC20);\\n\\n    function matcher() external view returns (IMatcher);\\n\\n    function factory() external view returns (IDealFactory);\\n\\n    // ------------------ external Mutable Functions ------------------\\n    function setMatcher(IMatcher matcher_) external;\\n\\n    function setFactory(IDealFactory factory_) external;\\n}\\n\",\"keccak256\":\"0x3bcf6a0d5f47178b0b709533e3e43e34f5473860eccff2a43544ee6f0e1c75f8\",\"license\":\"Apache-2.0\"},\"contracts/global/matcher/Matcher.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./MatcherConfig.sol\\\";\\nimport \\\"./interfaces/IMatcher.sol\\\";\\nimport \\\"../../deal/interfaces/IDeal.sol\\\";\\nimport \\\"../../deal/interfaces/IConfig.sol\\\";\\n\\ncontract Matcher is MatcherConfig, IMatcher {\\n    using SafeERC20 for IERC20;\\n    using LinkedListWithUniqueKeys for LinkedListWithUniqueKeys.Bytes32List;\\n    using ComputeProvidersList for ComputeProvidersList.List;\\n    using ComputeProvidersList for ComputeProvidersList.ComputePeersList;\\n\\n    // ----------------- Constants -----------------\\n    uint256 private constant _MIN_REMATCHING_EPOCHS = 2;\\n\\n    // ----------------- Constructor -----------------\\n    constructor(IGlobalCore globalCore_) MatcherConfig(globalCore_) {}\\n\\n    // ----------------- View -----------------\\n    // TODO: move this logic to offchain. Temp solution\\n    function findComputePeers(IDeal deal) external view returns (address[] memory computeProviders, bytes32[][] memory computePeers) {\\n        ConfigStorage storage configStorage = _getConfigStorage();\\n\\n        uint pricePerWorkerEpoch = deal.pricePerWorkerEpoch();\\n        uint collateralPerWorker = deal.collateralPerWorker();\\n        uint freeWorkerSlots = deal.targetWorkers() - deal.getComputeUnitCount();\\n        CIDV1[] memory effectors = deal.effectors();\\n        IDeal.AccessType accessType = deal.accessType();\\n\\n        bytes32 currentId = configStorage.computeProvidersList.first();\\n        ComputeProvidersList.List memory foundComputeProviders;\\n\\n        // TODO: optimize with white list\\n        while (currentId != bytes32(0x00) && freeWorkerSlots > 0) {\\n            address computeProviderAddress = address(bytes20(currentId));\\n\\n            if (\\n                (accessType == IConfig.AccessType.BLACKLIST && deal.isInAccessList(computeProviderAddress)) ||\\n                (accessType == IConfig.AccessType.WHITELIST && !deal.isInAccessList(computeProviderAddress)) ||\\n                configStorage.computeProviderByOwner[computeProviderAddress].minPricePerEpoch > pricePerWorkerEpoch ||\\n                configStorage.computeProviderByOwner[computeProviderAddress].maxCollateral < collateralPerWorker ||\\n                !_doComputeProviderHasEffectors(computeProviderAddress, effectors)\\n            ) {\\n                currentId = configStorage.computeProvidersList.next(currentId);\\n                continue;\\n            }\\n\\n            ComputeProvidersList.ComputePeersList memory foundComputePeers = foundComputeProviders.add(computeProviderAddress);\\n\\n            LinkedListWithUniqueKeys.Bytes32List storage computePeersList = configStorage.computePeersListByProvider[\\n                computeProviderAddress\\n            ];\\n            bytes32 peerId = computePeersList.first();\\n\\n            while (peerId != bytes32(0x00) && freeWorkerSlots > 0) {\\n                foundComputePeers.add(peerId);\\n                freeWorkerSlots--;\\n\\n                peerId = computePeersList.next(peerId);\\n            }\\n\\n            // get next compute provider\\n            currentId = configStorage.computeProvidersList.next(currentId);\\n        }\\n\\n        ComputeProvidersList.CPsAndPeersBytes32Array memory result = foundComputeProviders.toBytes32Array();\\n\\n        //TODO: fix double copy for ABI encoder with asm\\n        return (result.computeProviders, result.computePeers);\\n    }\\n\\n    // ----------------- Mutable -----------------\\n    //TODO: refactoring\\n    function matchDeal(IDeal deal, address[] calldata providers, bytes32[][] calldata peers) external {\\n        ConfigStorage storage configStorage = _getConfigStorage();\\n\\n        uint currentEpoch = _globalCore.currentEpoch();\\n        require(currentEpoch > configStorage.minMatchingEpochByDeal[deal], \\\"Deal is not ready for matching\\\");\\n        require(_globalCore.factory().hasDeal(deal), \\\"Deal is not from factory\\\");\\n\\n        IERC20 fluenceToken = _globalCore.fluenceToken();\\n\\n        // load deal config\\n        CIDV1[] memory effectors = deal.effectors();\\n        uint dealRequiredCollateral = deal.collateralPerWorker();\\n        uint dealPricePerEpoch = deal.pricePerWorkerEpoch();\\n        uint freeWorkerSlotsInDeal = deal.targetWorkers() - deal.getComputeUnitCount();\\n        IDeal.AccessType accessType = deal.accessType();\\n\\n        CIDV1 memory dealAppCID = deal.appCID(); //TODO: temp solution for peers. Remove from event in future.\\n        uint dealCreationBlock = deal.creationBlock(); //TODO: temp solution for peers. Remove from event in future.\\n\\n        bool isMatched = false;\\n        uint providersLength = providers.length;\\n        for (uint i = 0; i < providersLength; i++) {\\n            address computeProviderAddress = providers[i];\\n\\n            if (accessType == IConfig.AccessType.WHITELIST) {\\n                require(deal.isInAccessList(computeProviderAddress), \\\"Compute provider is not in whitelist\\\");\\n            } else if (accessType == IConfig.AccessType.BLACKLIST) {\\n                require(!deal.isInAccessList(computeProviderAddress), \\\"Compute provider is in blacklist\\\");\\n            }\\n\\n            uint maxCollateral = configStorage.computeProviderByOwner[computeProviderAddress].maxCollateral;\\n            uint minPricePerEpoch = configStorage.computeProviderByOwner[computeProviderAddress].minPricePerEpoch;\\n\\n            if (\\n                minPricePerEpoch > dealPricePerEpoch ||\\n                maxCollateral < dealRequiredCollateral ||\\n                !_doComputeProviderHasEffectors(computeProviderAddress, effectors)\\n            ) {\\n                continue;\\n            }\\n\\n            uint peersLength = peers[i].length;\\n            for (uint j = 0; j < peersLength; j++) {\\n                bytes32 peerId = peers[i][j];\\n\\n                // create ComputeUnits\\n                fluenceToken.approve(address(deal), dealRequiredCollateral);\\n                bytes32 computeUnitId = deal.createComputeUnit(computeProviderAddress, peerId);\\n\\n                // refound collateral\\n                uint refoundByWorker = maxCollateral - dealRequiredCollateral;\\n                if (refoundByWorker > 0) {\\n                    fluenceToken.transfer(computeProviderAddress, refoundByWorker);\\n                }\\n\\n                freeWorkerSlotsInDeal--;\\n\\n                uint freeWorkerSlots = configStorage.computePeerByPeerId[peerId].freeWorkerSlots;\\n                freeWorkerSlots--;\\n\\n                // update free worker slots\\n                if (freeWorkerSlots == 0) {\\n                    delete configStorage.computePeerByPeerId[peerId];\\n                    configStorage.computePeersListByProvider[computeProviderAddress].remove(peerId);\\n                } else {\\n                    configStorage.computePeerByPeerId[peerId].freeWorkerSlots = freeWorkerSlots;\\n                }\\n\\n                emit ComputePeerMatched(peerId, deal, computeUnitId, dealCreationBlock, dealAppCID);\\n                isMatched = true;\\n\\n                if (freeWorkerSlotsInDeal == 0) {\\n                    return;\\n                }\\n            }\\n        }\\n\\n        if (isMatched) {\\n            configStorage.minMatchingEpochByDeal[deal] = currentEpoch + _MIN_REMATCHING_EPOCHS;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x402c4f97b62319e243a2c3fc08e43db03e319361723a84ca7b1f962f9b743a6c\",\"license\":\"Apache-2.0\"},\"contracts/global/matcher/MatcherConfig.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IMatcherConfig.sol\\\";\\nimport \\\"../interfaces/IGlobalCore.sol\\\";\\nimport \\\"../../utils/LinkedListWithUniqueKeys.sol\\\";\\nimport \\\"../../utils/ComputeProvidersList.sol\\\";\\nimport \\\"../../deal/base/Types.sol\\\";\\n\\ncontract MatcherConfig is IMatcherConfig {\\n    using LinkedListWithUniqueKeys for LinkedListWithUniqueKeys.Bytes32List;\\n    using SafeERC20 for IERC20;\\n\\n    // ----------------- Types -----------------\\n    struct ComputeProvider {\\n        uint minPricePerEpoch;\\n        uint maxCollateral;\\n        IERC20 paymentToken;\\n        uint totalFreeWorkerSlots;\\n    }\\n\\n    struct ComputePeer {\\n        uint freeWorkerSlots;\\n    }\\n\\n    // ----------------- Immutable -----------------\\n    IGlobalCore public immutable _globalCore;\\n\\n    // ------------------ Storage ------------------\\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\\\"fluence.matcher.storage.v1.config\\\")) - 1);\\n\\n    struct ConfigStorage {\\n        // Compute providers\\n        LinkedListWithUniqueKeys.Bytes32List computeProvidersList;\\n        mapping(address => ComputeProvider) computeProviderByOwner;\\n        // Compute peers\\n        mapping(address => LinkedListWithUniqueKeys.Bytes32List) computePeersListByProvider;\\n        mapping(bytes32 => ComputePeer) computePeerByPeerId;\\n        mapping(address => mapping(bytes32 => bool)) effectorsByComputeProvider;\\n        // Matching\\n        mapping(IDeal => uint) minMatchingEpochByDeal;\\n    }\\n\\n    ConfigStorage private _storage;\\n\\n    function _getConfigStorage() internal pure returns (ConfigStorage storage s) {\\n        bytes32 storageSlot = _STORAGE_SLOT;\\n        assembly {\\n            s.slot := storageSlot\\n        }\\n    }\\n\\n    // ----------------- Constructor -----------------\\n    constructor(IGlobalCore globalCore_) {\\n        _globalCore = globalCore_;\\n    }\\n\\n    // ----------------- Internal -----------------\\n    function _getComputeProvider(address owner) internal view returns (ComputeProvider storage) {\\n        ComputeProvider storage computeProvider = _getConfigStorage().computeProviderByOwner[owner];\\n        require(address(computeProvider.paymentToken) != address(0x00), \\\"Compute provider doesn't exist\\\");\\n\\n        return computeProvider;\\n    }\\n\\n    function _doComputeProviderHasEffectors(address computeProvider, CIDV1[] memory effectors) internal view returns (bool) {\\n        ConfigStorage storage configStorage = _getConfigStorage();\\n\\n        uint256 length = effectors.length;\\n        for (uint i = 0; i < length; i++) {\\n            bytes32 dealEffector = keccak256(abi.encodePacked(effectors[i].prefixes, effectors[i].hash));\\n            if (!configStorage.effectorsByComputeProvider[computeProvider][dealEffector]) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    // ----------------- Public View -----------------\\n    function getFreeWorkersSolts(bytes32 peerId) external view returns (uint) {\\n        return _getConfigStorage().computePeerByPeerId[peerId].freeWorkerSlots;\\n    }\\n\\n    // ----------------- Public Mutable -----------------\\n    function registerComputeProvider(uint minPricePerEpoch, uint maxCollateral, IERC20 paymentToken, CIDV1[] calldata effectors) external {\\n        ConfigStorage storage configStorage = _getConfigStorage();\\n\\n        //TODO: add global whitelist\\n\\n        // validate input\\n        require(minPricePerEpoch > 0, \\\"Min price per epoch should be greater than 0\\\");\\n        require(maxCollateral > 0, \\\"Max collateral should be greater than 0\\\");\\n        require(address(paymentToken) != address(0x00), \\\"Compute provider already\\\");\\n\\n        address owner = msg.sender;\\n        require(address(configStorage.computeProviderByOwner[owner].paymentToken) == address(0x00), \\\"Compute provider already\\\");\\n\\n        // register compute provider\\n        configStorage.computeProviderByOwner[owner] = ComputeProvider({\\n            minPricePerEpoch: minPricePerEpoch,\\n            maxCollateral: maxCollateral,\\n            paymentToken: paymentToken,\\n            totalFreeWorkerSlots: 0\\n        });\\n        configStorage.computeProvidersList.push(bytes32(bytes20(owner)));\\n\\n        // register effectors\\n        for (uint i = 0; i < effectors.length; i++) {\\n            bytes32 dealEffector = keccak256(abi.encodePacked(effectors[i].prefixes, effectors[i].hash));\\n            configStorage.effectorsByComputeProvider[owner][dealEffector] = true;\\n        }\\n\\n        emit ComputeProviderRegistered(owner, minPricePerEpoch, maxCollateral, paymentToken, effectors);\\n    }\\n\\n    function addWorkersSlots(bytes32 peerId, uint workerSlots) external {\\n        ConfigStorage storage configStorage = _getConfigStorage();\\n\\n        address owner = msg.sender;\\n\\n        require(workerSlots > 0, \\\"Worker slots should be greater than 0\\\");\\n\\n        // calculate new free worker slots\\n        uint256 freeWorkerSlots = configStorage.computePeerByPeerId[peerId].freeWorkerSlots;\\n\\n        // add peer to compute provider list if it's not there\\n        if (freeWorkerSlots == 0) {\\n            configStorage.computePeersListByProvider[owner].push(peerId);\\n        }\\n\\n        freeWorkerSlots += workerSlots;\\n\\n        configStorage.computePeerByPeerId[peerId].freeWorkerSlots = freeWorkerSlots;\\n\\n        // put collateral\\n        uint amount = configStorage.computeProviderByOwner[owner].maxCollateral * workerSlots;\\n        configStorage.computeProviderByOwner[owner].paymentToken.safeTransferFrom(owner, address(this), amount);\\n\\n        emit WorkersSlotsChanged(peerId, freeWorkerSlots);\\n    }\\n\\n    function subWorkersSlots(bytes32 peerId, uint workerSlots) external {\\n        ConfigStorage storage configStorage = _getConfigStorage();\\n\\n        address owner = msg.sender;\\n\\n        // validate input\\n        uint256 freeWorkerSlots = configStorage.computePeerByPeerId[peerId].freeWorkerSlots - workerSlots;\\n        configStorage.computePeerByPeerId[peerId].freeWorkerSlots = freeWorkerSlots;\\n\\n        // remove peer from compute provider list if it has no free worker slots\\n        if (freeWorkerSlots == 0) {\\n            configStorage.computePeersListByProvider[owner].remove(peerId);\\n        }\\n\\n        // retrun collateral\\n        uint amount = configStorage.computeProviderByOwner[owner].maxCollateral * workerSlots;\\n        configStorage.computeProviderByOwner[owner].paymentToken.safeTransferFrom(address(this), owner, amount);\\n\\n        emit WorkersSlotsChanged(peerId, freeWorkerSlots);\\n    }\\n\\n    function changeMinPricePerEpoch(uint newMinPricePerEpoch) external {\\n        require(newMinPricePerEpoch > 0, \\\"Min price per epoch should be greater than 0\\\");\\n\\n        ComputeProvider storage computeProvider = _getComputeProvider(msg.sender);\\n\\n        computeProvider.minPricePerEpoch = newMinPricePerEpoch;\\n\\n        emit MinPricePerEpochChanged(msg.sender, newMinPricePerEpoch);\\n    }\\n\\n    function changeMaxCollateral(uint newMaxCollateral) external {\\n        require(newMaxCollateral > 0, \\\"Max collateral should be greater than 0\\\");\\n\\n        address owner = msg.sender;\\n        ComputeProvider storage computeProvider = _getComputeProvider(owner);\\n\\n        uint oldMaxCollateral = computeProvider.maxCollateral;\\n\\n        require(oldMaxCollateral != newMaxCollateral, \\\"Max collateral is the same\\\");\\n        computeProvider.maxCollateral = newMaxCollateral;\\n\\n        // if compute provider has no free worker slots. Do nothing.\\n        if (computeProvider.totalFreeWorkerSlots == 0) {\\n            return;\\n        }\\n\\n        // calculate new collateral\\n        if (oldMaxCollateral > newMaxCollateral) {\\n            uint amount = (oldMaxCollateral - newMaxCollateral) * computeProvider.totalFreeWorkerSlots;\\n\\n            computeProvider.paymentToken.safeTransfer(owner, amount);\\n        } else {\\n            uint amount = (newMaxCollateral - oldMaxCollateral) * computeProvider.totalFreeWorkerSlots;\\n\\n            computeProvider.paymentToken.safeTransferFrom(owner, address(this), amount);\\n        }\\n\\n        emit MaxCollateralChanged(owner, newMaxCollateral);\\n    }\\n\\n    function changePaymentToken(IERC20 newPaymentToken, uint newMaxCollateral) external {\\n        require(address(newPaymentToken) != address(0x00), \\\"Payment token should be not zero address\\\");\\n\\n        address owner = msg.sender;\\n        ComputeProvider storage computeProvider = _getComputeProvider(owner);\\n\\n        IERC20 oldPaymentToken = computeProvider.paymentToken;\\n        computeProvider.paymentToken = newPaymentToken;\\n\\n        uint oldAmount = computeProvider.maxCollateral * computeProvider.totalFreeWorkerSlots;\\n        oldPaymentToken.safeTransfer(owner, oldAmount);\\n\\n        uint newAmount = newMaxCollateral * computeProvider.totalFreeWorkerSlots;\\n        newPaymentToken.safeTransferFrom(owner, address(this), newAmount);\\n\\n        emit PaymentTokenChanged(owner, newPaymentToken);\\n    }\\n\\n    function addEffector(CIDV1 calldata effector) external {\\n        ConfigStorage storage configStorage = _getConfigStorage();\\n\\n        address owner = msg.sender;\\n\\n        bytes32 effectorCIDHash = keccak256(abi.encodePacked(effector.prefixes, effector.hash));\\n\\n        require(configStorage.effectorsByComputeProvider[owner][effectorCIDHash] == false, \\\"Effector already exists\\\");\\n        configStorage.effectorsByComputeProvider[owner][effectorCIDHash] = true;\\n\\n        emit EffectorAdded(owner, effector);\\n    }\\n\\n    function removeEffector(CIDV1 calldata effector) external {\\n        ConfigStorage storage configStorage = _getConfigStorage();\\n\\n        address owner = msg.sender;\\n\\n        bytes32 effectorCIDHash = keccak256(abi.encodePacked(effector.prefixes, effector.hash));\\n\\n        require(configStorage.effectorsByComputeProvider[owner][effectorCIDHash] == true, \\\"Effector doesn't exist\\\");\\n        configStorage.effectorsByComputeProvider[owner][effectorCIDHash] = false;\\n\\n        emit EffectorRemoved(owner, effector);\\n    }\\n\\n    function removeComputeProvider() external {\\n        ConfigStorage storage configStorage = _getConfigStorage();\\n\\n        address owner = msg.sender;\\n        ComputeProvider storage computeProvider = _getComputeProvider(owner);\\n\\n        require(address(computeProvider.paymentToken) != address(0x00), \\\"Compute provider doesn't exist\\\");\\n\\n        IERC20 paymentToken = computeProvider.paymentToken;\\n        uint amount = computeProvider.maxCollateral * computeProvider.totalFreeWorkerSlots;\\n\\n        delete computeProvider.minPricePerEpoch;\\n        delete computeProvider.maxCollateral;\\n        delete computeProvider.paymentToken;\\n        delete computeProvider.totalFreeWorkerSlots;\\n\\n        paymentToken.safeTransfer(owner, amount);\\n\\n        configStorage.computeProvidersList.remove(bytes32(bytes20(owner)));\\n\\n        emit ComputeProviderRemoved(owner);\\n    }\\n}\\n\",\"keccak256\":\"0x68dd6eef424d5f491239aafe2b25a52678f8b7867212ff18b4399a8a1f6ab5bc\",\"license\":\"Apache-2.0\"},\"contracts/global/matcher/interfaces/IMatcher.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../deal/base/Types.sol\\\";\\nimport \\\"../../../deal/interfaces/IDeal.sol\\\";\\n\\ninterface IMatcher {\\n    // ----------------- Events -----------------\\n    event ComputePeerMatched(bytes32 indexed peerId, IDeal deal, bytes32 computeUnitId, uint dealCreationBlock, CIDV1 appCID);\\n\\n    // ----------------- View -----------------\\n    // TODO: move this logic to offchain. Temp solution\\n    function findComputePeers(IDeal deal) external view returns (address[] memory computeProviders, bytes32[][] memory computePeers);\\n\\n    // ----------------- Mutables -----------------\\n    function matchDeal(IDeal deal, address[] calldata providers, bytes32[][] calldata peers) external;\\n}\\n\",\"keccak256\":\"0x4338004e25f5442ee1f75badfc7c489b1808d4b8eced2f9fee8288d8b4e2c0b1\",\"license\":\"Apache-2.0\"},\"contracts/global/matcher/interfaces/IMatcherConfig.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../deal/base/Types.sol\\\";\\nimport \\\"../../../deal/interfaces/IDeal.sol\\\";\\n\\ninterface IMatcherConfig {\\n    // ----------------- Events -----------------\\n    event ComputeProviderRegistered(\\n        address computeProvider,\\n        uint minPricePerEpoch,\\n        uint maxCollateral,\\n        IERC20 paymentToken,\\n        CIDV1[] effectors\\n    );\\n    event ComputeProviderRemoved(address computeProvider);\\n\\n    event WorkersSlotsChanged(bytes32 peerId, uint newWorkerSlots);\\n    event MinPricePerEpochChanged(address computeProvider, uint newMinPricePerEpoch);\\n    event MaxCollateralChanged(address computeProvider, uint newMaxCollateral);\\n    event PaymentTokenChanged(address computeProvider, IERC20 newPaymentToken);\\n    event EffectorAdded(address computeProvider, CIDV1 effector);\\n    event EffectorRemoved(address computeProvider, CIDV1 effector);\\n\\n    // ----------------- View -----------------\\n    function getFreeWorkersSolts(bytes32 peerId) external view returns (uint);\\n\\n    // ----------------- Mutable -----------------\\n    function registerComputeProvider(uint minPricePerEpoch, uint maxCollateral, IERC20 paymentToken, CIDV1[] calldata effectors) external;\\n\\n    function addWorkersSlots(bytes32 peerId, uint workerSlots) external;\\n\\n    function subWorkersSlots(bytes32 peerId, uint workerSlots) external;\\n\\n    function changeMinPricePerEpoch(uint newMinPricePerEpoch) external;\\n\\n    function changeMaxCollateral(uint newMaxCollateral) external;\\n\\n    function changePaymentToken(IERC20 newPaymentToken, uint newMaxCollateral) external;\\n\\n    function addEffector(CIDV1 calldata effector) external;\\n\\n    function removeEffector(CIDV1 calldata effector) external;\\n\\n    function removeComputeProvider() external;\\n}\\n\",\"keccak256\":\"0xade17eaadfca7a094059493b74070fa345355657e0ad6f723e3f565dd8560ac7\",\"license\":\"Apache-2.0\"},\"contracts/utils/ComputeProvidersList.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nlibrary ComputeProvidersList {\\n    // ------------------ TYPES ------------------\\n    struct List {\\n        bytes32 firstPtr;\\n        bytes32 lastPtr;\\n        uint256 length;\\n    }\\n\\n    struct ComputePeersList {\\n        bytes32 firstPtr;\\n        bytes32 lastPtr;\\n        uint256 length;\\n    }\\n\\n    struct ComputeProvider {\\n        address value;\\n        bytes32 nextPtr;\\n        bytes32 computePeersListPtr;\\n    }\\n\\n    struct ComputePeer {\\n        bytes32 value;\\n        bytes32 nextPtr;\\n    }\\n\\n    struct CPsAndPeersBytes32Array {\\n        address[] computeProviders;\\n        bytes32[][] computePeers;\\n    }\\n\\n    // ------------------ PRIVATE ------------------\\n    function _push(bytes32 listPointer, bytes32 elementPtr) private pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let firstPtrPtr := listPointer\\n            let propLastPtrPtr := add(firstPtrPtr, 32) // list.firstPtr\\n            let propLengthPtr := add(propLastPtrPtr, 32) // ptr -> list.length\\n\\n            let firstPtr := mload(listPointer) // list.firstPtr\\n            let lastPtr := mload(propLastPtrPtr) // list.lastPtr\\n            let length := mload(propLengthPtr) // list.length\\n\\n            mstore(propLastPtrPtr, elementPtr) // list.lastPtr = elementPtr\\n            mstore(propLengthPtr, add(length, 1)) // list.length++\\n\\n            switch eq(firstPtr, 0)\\n            case true {\\n                mstore(firstPtrPtr, elementPtr) // list.firstPtr = elementPtr\\n            }\\n            case false {\\n                let propNextPtrPtr := add(lastPtr, 32) // ptr -> element.nextPtr\\n                mstore(propNextPtrPtr, elementPtr) // element.nextPtr = elementPtr\\n            }\\n        }\\n    }\\n\\n    // ------------------ VIEWS ------------------\\n    function toBytes32Array(List memory self) internal pure returns (CPsAndPeersBytes32Array memory cpAndPeersBytes32Array) {\\n        uint256 length = self.length;\\n\\n        cpAndPeersBytes32Array.computeProviders = new address[](length);\\n        cpAndPeersBytes32Array.computePeers = new bytes32[][](length);\\n\\n        bytes32 ptr = self.firstPtr;\\n        for (uint256 i = 0; i < length; i++) {\\n            address value;\\n            bytes32 computePeersListPtr;\\n            assembly (\\\"memory-safe\\\") {\\n                value := mload(ptr) // value\\n                computePeersListPtr := mload(add(ptr, 64)) // computePeersListPtr\\n                ptr := mload(add(ptr, 32)) // nextPtr\\n            }\\n\\n            cpAndPeersBytes32Array.computeProviders[i] = value;\\n\\n            bytes32 peersPtr;\\n            uint256 peersLength;\\n            assembly (\\\"memory-safe\\\") {\\n                peersPtr := mload(computePeersListPtr) // firstPtr\\n                peersLength := mload(add(computePeersListPtr, 64)) // length\\n            }\\n\\n            cpAndPeersBytes32Array.computePeers[i] = new bytes32[](peersLength);\\n            for (uint256 j = 0; j < peersLength; j++) {\\n                bytes32 peerId;\\n                assembly (\\\"memory-safe\\\") {\\n                    peerId := mload(peersPtr) // value\\n                    peersPtr := mload(add(peersPtr, 32)) // nextPtr\\n                }\\n                cpAndPeersBytes32Array.computePeers[i][j] = peerId;\\n            }\\n        }\\n    }\\n\\n    // -------------- MEMORY MUTABLES ----------------\\n    function add(List memory self, address value) internal pure returns (ComputePeersList memory computePeersList) {\\n        ComputeProvider memory cp;\\n\\n        bytes32 cpPtr;\\n        bytes32 cpListPtr;\\n        bytes32 computePeersListPtr;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            cpPtr := cp\\n            cpListPtr := self\\n            computePeersListPtr := computePeersList\\n        }\\n\\n        cp.value = value;\\n        cp.computePeersListPtr = computePeersListPtr;\\n\\n        _push(cpListPtr, cpPtr);\\n    }\\n\\n    function add(ComputePeersList memory self, bytes32 value) internal pure {\\n        ComputePeer memory peer = ComputePeer({ value: value, nextPtr: bytes32(0) });\\n\\n        bytes32 peerPtr;\\n        bytes32 listPt;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            peerPtr := peer\\n            listPt := self\\n        }\\n\\n        _push(listPt, peerPtr);\\n    }\\n}\\n\",\"keccak256\":\"0x6cdeb5638162fd3324e3868b176fef503df08045c3dbb405e45ca77eb6e19516\",\"license\":\"Apache-2.0\"},\"contracts/utils/LinkedListWithUniqueKeys.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nlibrary LinkedListWithUniqueKeys {\\n    // ------------------ TYPES ------------------\\n    struct Element {\\n        bytes32 prev;\\n        bytes32 next;\\n    }\\n\\n    struct Bytes32List {\\n        bytes32 _first;\\n        bytes32 _last;\\n        uint256 _length;\\n        mapping(bytes32 => Element) _elements;\\n    }\\n\\n    // ------------------ PRIVATE ------------------\\n    function _has(Bytes32List storage self, Element memory element, bytes32 key) private view returns (bool) {\\n        return element.prev != bytes32(0x00) || element.next != bytes32(0x00) || key == self._first || key == self._last;\\n    }\\n\\n    // ------------------ VIEWS ------------------\\n\\n    function first(Bytes32List storage self) internal view returns (bytes32) {\\n        return self._first;\\n    }\\n\\n    function last(Bytes32List storage self) internal view returns (bytes32) {\\n        return self._last;\\n    }\\n\\n    function length(Bytes32List storage self) internal view returns (uint256) {\\n        return self._length;\\n    }\\n\\n    function has(Bytes32List storage self, bytes32 key) internal view returns (bool) {\\n        return _has(self, self._elements[key], key);\\n    }\\n\\n    function next(Bytes32List storage self, bytes32 key) internal view returns (bytes32) {\\n        return self._elements[key].next;\\n    }\\n\\n    function prev(Bytes32List storage self, bytes32 key) internal view returns (bytes32) {\\n        return self._elements[key].prev;\\n    }\\n\\n    function toArray(Bytes32List storage self) internal view returns (bytes32[] memory) {\\n        uint256 arrayLength = self._length;\\n        bytes32[] memory array = new bytes32[](arrayLength);\\n\\n        bytes32 current = self._first;\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            array[i] = current;\\n            current = self._elements[current].next;\\n        }\\n\\n        return array;\\n    }\\n\\n    // ------------------ MUTABLES ------------------\\n    function push(Bytes32List storage self, bytes32 key) internal {\\n        require(key != bytes32(0x00), \\\"Key cannot be ZERO\\\");\\n        require(!has(self, key), \\\"Key already exists\\\");\\n\\n        bytes32 oldLast = self._last;\\n\\n        self._length++;\\n\\n        if (oldLast == 0) {\\n            self._first = key;\\n            self._last = key;\\n            return;\\n        }\\n\\n        self._last = key;\\n        self._elements[key].prev = oldLast;\\n        self._elements[oldLast].next = key;\\n    }\\n\\n    function remove(Bytes32List storage self, bytes32 key) internal {\\n        Element memory element = self._elements[key];\\n\\n        require(_has(self, element, key), \\\"Key does not exist\\\");\\n\\n        if (element.prev == bytes32(0x00)) {\\n            self._first = element.next;\\n        }\\n\\n        if (element.next == bytes32(0x00)) {\\n            self._last = element.prev;\\n        }\\n\\n        if (element.prev != bytes32(0x00)) {\\n            self._elements[element.prev].next = element.next;\\n        }\\n\\n        if (element.next != bytes32(0x00)) {\\n            self._elements[element.next].prev = element.prev;\\n        }\\n\\n        delete self._elements[key];\\n\\n        self._length--;\\n    }\\n}\\n\",\"keccak256\":\"0xb76f0ffe2d1583afcf8743dc060ea05984200676f53101fc1c3f2a450bedcdd3\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a0346200007757601f6200370038819003918201601f19168301916001600160401b038311848410176200007c578084926020946040528339810103126200007757516001600160a01b0381168103620000775760805260405161366d90816200009382396080518181816117a00152611b1d0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6101e080604052600436101561001457600080fd5b60003560e01c90816301b40500146117755750806355eb409a1461140657806357145848146112bf57806359a6bf5f146110fa5780635c76899714610e965780636868bda314610e7a5780636afd603114610e1757806373e8f7e914610cc25780637f17845014610c5c578063b63af4b114610adc578063bb785b5514610a91578063be9fe691146101e15763f6ee7139146100af57600080fd5b346101dc577f1eaffb28f02e49aa8dce586ac73116a047f91a8116d887ed4e72496a2f10283f60406100e0366117e7565b816000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369a9061019860209183835261011d81876000205461188b565b9385600052835283866000205583156101a3575b3360005261016a7f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f3698918285526001886000200154612c6c565b9033600052835273ffffffffffffffffffffffffffffffffffffffff60028760002001541633903090612c7f565b8351928352820152a1005b336000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369983526101d78587600020613530565b610131565b600080fd5b346101dc5760206003193601126101dc5773ffffffffffffffffffffffffffffffffffffffff61020f6117c4565b16604051907f6cd13448000000000000000000000000000000000000000000000000000000008252602082600481845afa91821561065d57600092610a5d575b50604051907fedd0d734000000000000000000000000000000000000000000000000000000008252602082600481845afa91821561065d57600092610a29575b506040517f2943dcab000000000000000000000000000000000000000000000000000000008152602081600481855afa90811561065d576000916109f7575b50604051907f108d2f52000000000000000000000000000000000000000000000000000000008252602082600481865afa90811561065d576000916109c1575b610318925061188b565b92604051917ffc1e5e2a000000000000000000000000000000000000000000000000000000008352600083600481845afa92831561065d5760009361099c575b506040517fb55ec18a000000000000000000000000000000000000000000000000000000008152602081600481855afa90811561065d5760009161096d575b5093929490917f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369454936103c86119a3565b915b85948580151580610964575b156107055760038910156106d6576002891480610669575b80156105d4575b801561059b575b801561055f575b801561054b575b61050a576104346104196119a3565b976104226119a3565b9060601c81528860408201528661322f565b60601c6000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f36996020526040600020978854955b86151580610501575b156104b85761049e906104996040516104898161182e565b898152600060208201528a61322f565b6119eb565b956000526003890160205260016040600020015495610468565b99939792965093975093506000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f3697602052600160406000200154945b909692939591956103ca565b50801515610471565b50939791959094506000969296527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f3697602052600160406000200154946104f5565b506105598a8960601c6129fb565b1561040a565b508760601c6000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f36986020528360016040600020015410610403565b508760601c6000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369860205282604060002054116103fc565b506001891480156103f557506040517f055236f40000000000000000000000000000000000000000000000000000000081528860601c6004820152602081602481865afa90811561065d5760009161062e575b50156103f5565b610650915060203d602011610656575b610648818361184a565b8101906119d3565b8b610627565b503d61063e565b6040513d6000823e3d90fd5b506040517f055236f40000000000000000000000000000000000000000000000000000000081528860601c6004820152602081602481865afa90811561065d576000916106b7575b506103ee565b6106d0915060203d60201161065657610648818361184a565b8b6106b1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b846040516107128161182e565b6060908181526020810190828252604084015161072e81611898565b9461073c604051968761184a565b8186527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0958661076b84611898565b01366020830137835261077d82611898565b61078a604051918261184a565b8281528661079784611898565b0160005b81811061095457505084525160005b82811061089157505050519051906040519260206040850191604086528351809352850192019060005b818110610865575050508281036020840152815190818152602081016020808460051b8401019401956000925b84841061080e5786860387f35b909192939482828203018452875190602080835192838152019201906000905b80821061084d5750505060209788019790959460010193019190610801565b9091926020806001928651815201940192019061082e565b825173ffffffffffffffffffffffffffffffffffffffff168452602093840193909201916001016107d4565b815191602060408201519101519273ffffffffffffffffffffffffffffffffffffffff6108bf8488516129e7565b91169052604081519101519061090c836108d884611898565b6108e5604051918261184a565b8481528b6108f286611898565b0136602083013789519061090683836129e7565b526129e7565b5060005b8281106109285750505061092390611a16565b6107aa565b61094f90602083519301519261094982610943888d516129e7565b516129e7565b52611a16565b610910565b808860208093860101520161079b565b508515156103d6565b61098f915060203d602011610995575b610987818361184a565b81019061198b565b86610397565b503d61097d565b6109ba9193503d806000833e6109b2818361184a565b810190611902565b9185610358565b90506020823d6020116109ef575b816109dc6020938361184a565b810103126101dc5761031891519061030e565b3d91506109cf565b90506020813d602011610a21575b81610a126020938361184a565b810103126101dc5751846102ce565b3d9150610a05565b9091506020813d602011610a55575b81610a456020938361184a565b810103126101dc5751908361028f565b3d9150610a38565b9091506020813d602011610a89575b81610a796020938361184a565b810103126101dc5751908261024f565b3d9150610a6c565b346101dc5760206003193601126101dc576004356000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369a6020526020604060002054604051908152f35b346101dc5760406003193601126101dc57610af5612c3d565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091166020808301918252602480359084015291610b6281604481015b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261184a565b51902090336000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369b808252604060002083600052825260ff60406000205416610c185733600052815260406000209160005252604060002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790557f745c8d0f0a46a84d996b0f143854bf38e5c21b3a180895fca9d6c17654c3538960405180610c1333826131d3565b0390a1005b6064826040519062461bcd60e51b82526004820152601760248201527f4566666563746f7220616c7265616479206578697374730000000000000000006044820152fd5b346101dc5760206003193601126101dc577fa55f70960fade7ac9823693b7234ce8261649fa77567ca96b5a0bc76eea00c3c610c13600435610c9f811515612b00565b80610ca933612fca565b5560408051338152602081019290925290918291820190565b346101dc5760406003193601126101dc57610cdb612c3d565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091166020808301918252602480359084015291610d208160448101610b36565b51902090336000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369b8082526040600020836000528252600160ff60406000205416151503610dd3573360005281526040600020916000525260406000207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541690557f6e9663aceecefa351da298ff43f1b4ee80da411530c55352ba1d5c787118bd2160405180610c1333826131d3565b6064826040519062461bcd60e51b82526004820152601660248201527f4566666563746f7220646f65736e2774206578697374000000000000000000006044820152fd5b346101dc5760606003193601126101dc57610e306117c4565b67ffffffffffffffff906024358281116101dc57610e529036906004016117fd565b6044929192359384116101dc57610e70610e789436906004016117fd565b939092611ae5565b005b346101dc5760206003193601126101dc57610e78600435613022565b346101dc5760006003193601126101dc57610f27610eb333612fca565b600281016000815473ffffffffffffffffffffffffffffffffffffffff811692610ede841515612f7f565b7fffffffffffffffffffffffff000000000000000000000000000000000000000060018601928484549481610f1960038b0197885490612c6c565b99555516905555339061316c565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b16806000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f3697602090808252604060002092600160405194610f8d8661182e565b80548652015493838101948552610fa4828261346d565b156110b6577f1a9d4a5597d6ea11c9f37af1e8c69914b216e3b22aa6ca6e6387f24d7657647d9481518015908161108d575b8251918215611065575b1561104f575b505051908161103a575b50506000528152600060016040822082815501557f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369661102f81546119eb565b9055604051338152a1005b51906000528284526040600020558480610ff0565b6000528486526001604060002001558680610fe6565b817f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369555610fe0565b82517f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369455610fd6565b6064846040519062461bcd60e51b82526004820152601260248201527f4b657920646f6573206e6f7420657869737400000000000000000000000000006044820152fd5b346101dc57611108366117e7565b801561125557816000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369a91602083815260406000205490811561121b575b8382018092116111ec576101986040947f1eaffb28f02e49aa8dce586ac73116a047f91a8116d887ed4e72496a2f10283f96856000528352838660002055336000526111be7f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f3698918285526001886000200154612c6c565b9033600052835273ffffffffffffffffffffffffffffffffffffffff60028760002001541630903390612c7f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b336000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369981526112508360406000206133e9565b611147565b608460405162461bcd60e51b815260206004820152602560248201527f576f726b657220736c6f74732073686f756c642062652067726561746572207460448201527f68616e20300000000000000000000000000000000000000000000000000000006064820152fd5b346101dc5760406003193601126101dc576112d86117c4565b73ffffffffffffffffffffffffffffffffffffffff90818116801561139c5761138e6040926113847f2bd8c5354233e1142193df7977bd89f7ad57b724087278bad86db1e15fc3033b9561137b61132e33612fca565b9160028301805490887fffffffffffffffffffffffff0000000000000000000000000000000000000000831617905561137260036001860154950194855490612c6c565b9133911661316c565b54602435612c6c565b9030903390612c7f565b8151903382526020820152a1005b608460405162461bcd60e51b815260206004820152602860248201527f5061796d656e7420746f6b656e2073686f756c64206265206e6f74207a65726f60448201527f20616464726573730000000000000000000000000000000000000000000000006064820152fd5b346101dc5760806003193601126101dc5760043560243560443573ffffffffffffffffffffffffffffffffffffffff908181168091036101dc576064359367ffffffffffffffff908186116101dc57366023870112156101dc578560040135928284116101dc576024870196602436918660061b0101116101dc5761148c821515612b00565b611497861515612b71565b6114a2811515612be2565b336000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f36986020938185526114e1876002604060002001541615612be2565b60405191608083019182118383101761174657600391604098979698528483528783018981526040840190858252606085019260008452336000528a52604060002094518555519760019889860155600285019151167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055519101556115907fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b16613268565b60005b83811061164757509082916040519660a0880192338952878901526040880152606087015260a060808701525260c08401949260005b8281106115f8577f658bee377ff55ceae5c8883fc1d0ec604e9179fba1a50f0f094091cefa2eef0486880387a1005b90919293958635907fffffffff0000000000000000000000000000000000000000000000000000000082168092036101dc579081528683013583820152604090810196019392919083016115c9565b61165681858a98969798612c2d565b35907fffffffff00000000000000000000000000000000000000000000000000000000821682036101dc5761173d91610b366116d687611697858b8f612c2d565b01356040519283918a8301958690917fffffffff0000000000000000000000000000000000000000000000000000000060249316825260048201520190565b519020336000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369b865260406000209060005285526040600020877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055611a16565b94939294611593565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b346101dc5760006003193601126101dc5760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b6004359073ffffffffffffffffffffffffffffffffffffffff821682036101dc57565b60031960409101126101dc576004359060243590565b9181601f840112156101dc5782359167ffffffffffffffff83116101dc576020808501948460051b0101116101dc57565b6040810190811067ffffffffffffffff82111761174657604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761174657604052565b919082039182116111ec57565b67ffffffffffffffff81116117465760051b60200190565b91908260409103126101dc576040516118c88161182e565b809280517fffffffff00000000000000000000000000000000000000000000000000000000811681036101dc578252602090810151910152565b9060209182818303126101dc5780519067ffffffffffffffff82116101dc570181601f820112156101dc5780519261193984611898565b936040936119498551968761184a565b818652828087019260061b850101938185116101dc578301915b8483106119735750505050505090565b83869161198084866118b0565b815201920191611963565b908160209103126101dc575160038110156101dc5790565b604051906060820182811067ffffffffffffffff8211176117465760405260006040838281528260208201520152565b908160209103126101dc575180151581036101dc5790565b80156111ec577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146111ec5760010190565b9190811015611a535760051b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9190811015611a535760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1813603018212156101dc57019081359167ffffffffffffffff83116101dc576020018260051b360381136101dc579190565b60e05261014052610120919091526040517f7667180800000000000000000000000000000000000000000000000000000000815291907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16602084600481845afa93841561065d576000946129b3575b5073ffffffffffffffffffffffffffffffffffffffff60e051166000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369c60205260406000205484111561296f576040517fc45a0155000000000000000000000000000000000000000000000000000000008152602081600481855afa90811561065d5760009161291b575b50602073ffffffffffffffffffffffffffffffffffffffff916024604051809481937f210530530000000000000000000000000000000000000000000000000000000083528160e051166004840152165afa90811561065d576000916128fc575b50156128b8576020600491604051928380927fac027f970000000000000000000000000000000000000000000000000000000082525afa801561065d57600061018052612860575b50604051917ffc1e5e2a00000000000000000000000000000000000000000000000000000000835260008360048173ffffffffffffffffffffffffffffffffffffffff60e051165afa92831561065d57600093612845575b506040517fedd0d73400000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff60e051165afa801561065d57600060a05261280c575b506040517f6cd1344800000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff60e051165afa90811561065d576000916127da575b506040517f2943dcab00000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff60e051165afa90811561065d576000916127a8575b506040517f108d2f5200000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff60e051165afa90811561065d57600091612774575b50611e5e9161188b565b926040517fb55ec18a00000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff60e051165afa801561065d576000608052612753575b50604051927f9bc6686800000000000000000000000000000000000000000000000000000000845260408460048173ffffffffffffffffffffffffffffffffffffffff60e051165afa93841561065d57600094612712575b50604051957f1763451400000000000000000000000000000000000000000000000000000000875260208760048173ffffffffffffffffffffffffffffffffffffffff60e051165afa96871561065d576000976126db575b50600061010081905292935b848410611fdf57505050505050505061010051611f8c5750565b600281018091116111ec5773ffffffffffffffffffffffffffffffffffffffff60e051166000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369c602052604060002055565b611ff684866101409b9495969798999a9b51611a43565b356101605273ffffffffffffffffffffffffffffffffffffffff610160511661016051036101dc5760805160038110156106d657600181036125f657506040517f055236f400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff6101605116600482015260208160248173ffffffffffffffffffffffffffffffffffffffff60e051165afa90811561065d576000916125d7575b501561256e575b73ffffffffffffffffffffffffffffffffffffffff61016051166000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f36986020526040600020958160018801549754118015612563575b801561254f575b61253d5761212386866101209d9c9b9d51611a82565b949050600060c0525b8460c051101561252357612150612147888861012051611a82565b60c05191611a43565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815260a05160e05173ffffffffffffffffffffffffffffffffffffffff166004830152602482015290359060208180604481010381600073ffffffffffffffffffffffffffffffffffffffff61018051165af1801561065d57612504575b506040516101c0527feebe998f000000000000000000000000000000000000000000000000000000006101c0515273ffffffffffffffffffffffffffffffffffffffff610160511660046101c05101528060246101c051015260206101c05160446101c051600073ffffffffffffffffffffffffffffffffffffffff60e051165af16101a0526101a0511561065d5760009c6101a0516124c5575b9c8b9c9d61227d60a0518c61188b565b806123ec575b507f1c13422d2375fe8a96ddbe3f6e2efc794f2befbfe247217479ef4b68030d42c3916122b160a0926119eb565b9d846000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369a806020526122e96040600020546119eb565b806123d95750856000526020526000604081205573ffffffffffffffffffffffffffffffffffffffff61016051166000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369960205261234c856040600020613530565b6040519173ffffffffffffffffffffffffffffffffffffffff60e051168352602083015260408201527fffffffff000000000000000000000000000000000000000000000000000000008d5116606082015260208d01516080820152a260016101005289156123cc576123c060c051611a16565b60c0529a99989a61212c565b5050505050505050505050565b908660005260205260406000205561234c565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526101605173ffffffffffffffffffffffffffffffffffffffff1660048201526024810191909152919c509060208180604481010381600073ffffffffffffffffffffffffffffffffffffffff61018051165af19c8d1561065d576122b18f9e9360a0937f1c13422d2375fe8a96ddbe3f6e2efc794f2befbfe247217479ef4b68030d42c3956124a6575b5092505091612283565b6124be9060203d60201161065657610648818361184a565b503861249c565b60203d6020116124fd575b806124e06020926101c05161184a565b6101c05190810103126124f9576101c051519d5061226d565b8d80fd5b503d6124d0565b61251c9060203d60201161065657610648818361184a565b50386121d2565b92999a9796509392509361253690611a16565b9293611f72565b93929198979695509361253690611a16565b5061255d84610160516129fb565b1561210d565b5060a0518710612106565b608460405162461bcd60e51b8152602060048201526024808201527f436f6d707574652070726f7669646572206973206e6f7420696e20776869746560448201527f6c697374000000000000000000000000000000000000000000000000000000006064820152fd5b6125f0915060203d60201161065657610648818361184a565b386120a8565b6002036120af576040517f055236f400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff6101605116600482015260208160248173ffffffffffffffffffffffffffffffffffffffff60e051165afa90811561065d576000916126bc575b50156120af57606460405162461bcd60e51b815260206004820152602060248201527f436f6d707574652070726f766964657220697320696e20626c61636b6c6973746044820152fd5b6126d5915060203d60201161065657610648818361184a565b38612672565b90966020823d60201161270a575b816126f66020938361184a565b810103126127075750519538611f66565b80fd5b3d91506126e9565b90936040903d60401161274b575b61272a828461184a565b6040838381010312612707575090612744918101906118b0565b9238611f0e565b3d9150612720565b61276b9060203d60201161099557610987818361184a565b60805238611eb6565b906020823d6020116127a0575b8161278e6020938361184a565b81010312612707575051611e5e611e54565b3d9150612781565b906020823d6020116127d2575b816127c26020938361184a565b8101031261270757505138611dfd565b3d91506127b5565b906020823d602011612804575b816127f46020938361184a565b8101031261270757505138611da6565b3d91506127e7565b6020813d60201161283d575b816128256020938361184a565b81010312612837575160a05238611d4f565b60a05180fd5b3d9150612818565b61285991933d8091833e6109b2818361184a565b9138611cf7565b6020813d6020116128b0575b816128796020938361184a565b810103126128a9575173ffffffffffffffffffffffffffffffffffffffff811681036128a9576101805238611c9f565b6101805180fd5b3d915061286c565b606460405162461bcd60e51b815260206004820152601860248201527f4465616c206973206e6f742066726f6d20666163746f727900000000000000006044820152fd5b612915915060203d60201161065657610648818361184a565b38611c57565b6020813d602011612967575b816129346020938361184a565b8101031261296357519073ffffffffffffffffffffffffffffffffffffffff8216820361270757506020611bf6565b5080fd5b3d9150612927565b606460405162461bcd60e51b815260206004820152601e60248201527f4465616c206973206e6f7420726561647920666f72206d61746368696e6700006044820152fd5b90936020823d6020116129df575b816129ce6020938361184a565b810103126127075750519238611b6a565b3d91506129c1565b8051821015611a535760209160051b010190565b81519160005b838110612a115750505050600190565b60ff7fffffffff00000000000000000000000000000000000000000000000000000000612a3e83856129e7565b515116602080612a4e85876129e7565b510151604080517fffffffff00000000000000000000000000000000000000000000000000000000909416838501908152600481019290925292612a958160248401610b36565b5190209073ffffffffffffffffffffffffffffffffffffffff87166000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369b8152826000209160005252600020541615612af757612af290611a16565b612a01565b50505050600090565b15612b0757565b608460405162461bcd60e51b815260206004820152602c60248201527f4d696e207072696365207065722065706f63682073686f756c6420626520677260448201527f6561746572207468616e203000000000000000000000000000000000000000006064820152fd5b15612b7857565b608460405162461bcd60e51b815260206004820152602760248201527f4d617820636f6c6c61746572616c2073686f756c64206265206772656174657260448201527f207468616e2030000000000000000000000000000000000000000000000000006064820152fd5b15612be957565b606460405162461bcd60e51b815260206004820152601860248201527f436f6d707574652070726f766964657220616c726561647900000000000000006044820152fd5b9190811015611a535760061b0190565b6004357fffffffff00000000000000000000000000000000000000000000000000000000811681036101dc5790565b818102929181159184041417156111ec57565b9290604051927f23b872dd00000000000000000000000000000000000000000000000000000000602085015273ffffffffffffffffffffffffffffffffffffffff809216602485015216604483015260648201526064815260a081019181831067ffffffffffffffff84111761174657612cfb92604052612cfd565b565b73ffffffffffffffffffffffffffffffffffffffff909291921691604051612d248161182e565b6020918282527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564838301526000808285829451910182895af13d15612e85573d9567ffffffffffffffff8711612e5857612dbd94959660405190612daf887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116018361184a565b81528093873d92013e612e91565b805190828215928315612e40575b50505015612dd65750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b612e5093508201810191016119d3565b388281612dcb565b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b612dbd93949591506060915b91929015612ef25750815115612ea5575090565b3b15612eae5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015612f055750805190602001fd5b6040519062461bcd60e51b825281602080600483015282519283602484015260005b848110612f68575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201612f27565b15612f8657565b606460405162461bcd60e51b815260206004820152601e60248201527f436f6d707574652070726f766964657220646f65736e277420657869737400006044820152fd5b73ffffffffffffffffffffffffffffffffffffffff8091166000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369860205261301f6040600020916002830154161515612f7f565b90565b61302d811515612b71565b61303633612fca565b906001820190815491818314613128578190556003830180549384156131215782847fa8c62389b31fc6dfc3c0ec83e30a55441144e480af1c0721cf27c7c88f29952596826130db97116000146130e05750926130996130a1926130c39561188b565b905490612c6c565b9073ffffffffffffffffffffffffffffffffffffffff6002339201541661316c565b60408051338152602081019290925290918291820190565b0390a1565b61311c945061310f9061310a60029373ffffffffffffffffffffffffffffffffffffffff9561188b565b612c6c565b9201541630903390612c7f565b6130c3565b5050505050565b606460405162461bcd60e51b815260206004820152601a60248201527f4d617820636f6c6c61746572616c206973207468652073616d650000000000006044820152fd5b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff929092166024830152604480830193909352918152612cfb916131ce60648361184a565b612cfd565b91909173ffffffffffffffffffffffffffffffffffffffff60608201931681526004357fffffffff0000000000000000000000000000000000000000000000000000000081168091036101dc5760208201526040602435910152565b6020810190604081018151906001845194868351915201905215908160011461326257501561325c575050565b60200152565b91505052565b80156133a55760008181527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369790816020526132c083604083206001604051916132b08361182e565b805483520154602082015261346d565b613361577f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f3695918254907f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f36966133148154611a16565b9055848215613339579060409392916001955585835260205280838320558152200155565b7f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f36945550505055565b606460405162461bcd60e51b815260206004820152601260248201527f4b657920616c72656164792065786973747300000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601260248201527f4b65792063616e6e6f74206265205a45524f00000000000000000000000000006044820152fd5b81156133a55760038101906000908382528260205261342684604084206001604051916134158361182e565b8054835201546020820152836134ed565b61336157600181019284845492600281016134418154611a16565b9055831561346657509060409392916001955585835260205280838320558152200155565b5550505055565b90815115918215926134df575b5081156134b4575b811561348c575090565b90507f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f3695541490565b7f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f36945481149150613482565b60200151151591503861347a565b8151158015939290613522575b508215613517575b821561350d57505090565b6001015414919050565b805482149250613502565b6020015115159250386134fa565b91909160038101600090848252602081815260409586842060018851916135568361182e565b80548352015483820190815261356d8383896134ed565b156135f4579181600195936002999a959351801590816135eb575b82519182156135e1575b156135cf575b50505190816135bd575b505085525282208281550155016135b981546119eb565b9055565b519087528383528487205538806135a2565b895285855287878a2001553880613598565b818a8d0155613592565b82518b55613588565b6064848a519062461bcd60e51b82526004820152601260248201527f4b657920646f6573206e6f7420657869737400000000000000000000000000006044820152fdfea264697066735822122054d4851f4e39a69d5a23580d5bd97cdb22b5fef2eaf350e19c6051affe38c58d64736f6c63430008130033",
  "deployedBytecode": "0x6101e080604052600436101561001457600080fd5b60003560e01c90816301b40500146117755750806355eb409a1461140657806357145848146112bf57806359a6bf5f146110fa5780635c76899714610e965780636868bda314610e7a5780636afd603114610e1757806373e8f7e914610cc25780637f17845014610c5c578063b63af4b114610adc578063bb785b5514610a91578063be9fe691146101e15763f6ee7139146100af57600080fd5b346101dc577f1eaffb28f02e49aa8dce586ac73116a047f91a8116d887ed4e72496a2f10283f60406100e0366117e7565b816000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369a9061019860209183835261011d81876000205461188b565b9385600052835283866000205583156101a3575b3360005261016a7f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f3698918285526001886000200154612c6c565b9033600052835273ffffffffffffffffffffffffffffffffffffffff60028760002001541633903090612c7f565b8351928352820152a1005b336000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369983526101d78587600020613530565b610131565b600080fd5b346101dc5760206003193601126101dc5773ffffffffffffffffffffffffffffffffffffffff61020f6117c4565b16604051907f6cd13448000000000000000000000000000000000000000000000000000000008252602082600481845afa91821561065d57600092610a5d575b50604051907fedd0d734000000000000000000000000000000000000000000000000000000008252602082600481845afa91821561065d57600092610a29575b506040517f2943dcab000000000000000000000000000000000000000000000000000000008152602081600481855afa90811561065d576000916109f7575b50604051907f108d2f52000000000000000000000000000000000000000000000000000000008252602082600481865afa90811561065d576000916109c1575b610318925061188b565b92604051917ffc1e5e2a000000000000000000000000000000000000000000000000000000008352600083600481845afa92831561065d5760009361099c575b506040517fb55ec18a000000000000000000000000000000000000000000000000000000008152602081600481855afa90811561065d5760009161096d575b5093929490917f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369454936103c86119a3565b915b85948580151580610964575b156107055760038910156106d6576002891480610669575b80156105d4575b801561059b575b801561055f575b801561054b575b61050a576104346104196119a3565b976104226119a3565b9060601c81528860408201528661322f565b60601c6000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f36996020526040600020978854955b86151580610501575b156104b85761049e906104996040516104898161182e565b898152600060208201528a61322f565b6119eb565b956000526003890160205260016040600020015495610468565b99939792965093975093506000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f3697602052600160406000200154945b909692939591956103ca565b50801515610471565b50939791959094506000969296527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f3697602052600160406000200154946104f5565b506105598a8960601c6129fb565b1561040a565b508760601c6000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f36986020528360016040600020015410610403565b508760601c6000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369860205282604060002054116103fc565b506001891480156103f557506040517f055236f40000000000000000000000000000000000000000000000000000000081528860601c6004820152602081602481865afa90811561065d5760009161062e575b50156103f5565b610650915060203d602011610656575b610648818361184a565b8101906119d3565b8b610627565b503d61063e565b6040513d6000823e3d90fd5b506040517f055236f40000000000000000000000000000000000000000000000000000000081528860601c6004820152602081602481865afa90811561065d576000916106b7575b506103ee565b6106d0915060203d60201161065657610648818361184a565b8b6106b1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b846040516107128161182e565b6060908181526020810190828252604084015161072e81611898565b9461073c604051968761184a565b8186527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0958661076b84611898565b01366020830137835261077d82611898565b61078a604051918261184a565b8281528661079784611898565b0160005b81811061095457505084525160005b82811061089157505050519051906040519260206040850191604086528351809352850192019060005b818110610865575050508281036020840152815190818152602081016020808460051b8401019401956000925b84841061080e5786860387f35b909192939482828203018452875190602080835192838152019201906000905b80821061084d5750505060209788019790959460010193019190610801565b9091926020806001928651815201940192019061082e565b825173ffffffffffffffffffffffffffffffffffffffff168452602093840193909201916001016107d4565b815191602060408201519101519273ffffffffffffffffffffffffffffffffffffffff6108bf8488516129e7565b91169052604081519101519061090c836108d884611898565b6108e5604051918261184a565b8481528b6108f286611898565b0136602083013789519061090683836129e7565b526129e7565b5060005b8281106109285750505061092390611a16565b6107aa565b61094f90602083519301519261094982610943888d516129e7565b516129e7565b52611a16565b610910565b808860208093860101520161079b565b508515156103d6565b61098f915060203d602011610995575b610987818361184a565b81019061198b565b86610397565b503d61097d565b6109ba9193503d806000833e6109b2818361184a565b810190611902565b9185610358565b90506020823d6020116109ef575b816109dc6020938361184a565b810103126101dc5761031891519061030e565b3d91506109cf565b90506020813d602011610a21575b81610a126020938361184a565b810103126101dc5751846102ce565b3d9150610a05565b9091506020813d602011610a55575b81610a456020938361184a565b810103126101dc5751908361028f565b3d9150610a38565b9091506020813d602011610a89575b81610a796020938361184a565b810103126101dc5751908261024f565b3d9150610a6c565b346101dc5760206003193601126101dc576004356000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369a6020526020604060002054604051908152f35b346101dc5760406003193601126101dc57610af5612c3d565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091166020808301918252602480359084015291610b6281604481015b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261184a565b51902090336000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369b808252604060002083600052825260ff60406000205416610c185733600052815260406000209160005252604060002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790557f745c8d0f0a46a84d996b0f143854bf38e5c21b3a180895fca9d6c17654c3538960405180610c1333826131d3565b0390a1005b6064826040519062461bcd60e51b82526004820152601760248201527f4566666563746f7220616c7265616479206578697374730000000000000000006044820152fd5b346101dc5760206003193601126101dc577fa55f70960fade7ac9823693b7234ce8261649fa77567ca96b5a0bc76eea00c3c610c13600435610c9f811515612b00565b80610ca933612fca565b5560408051338152602081019290925290918291820190565b346101dc5760406003193601126101dc57610cdb612c3d565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091166020808301918252602480359084015291610d208160448101610b36565b51902090336000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369b8082526040600020836000528252600160ff60406000205416151503610dd3573360005281526040600020916000525260406000207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541690557f6e9663aceecefa351da298ff43f1b4ee80da411530c55352ba1d5c787118bd2160405180610c1333826131d3565b6064826040519062461bcd60e51b82526004820152601660248201527f4566666563746f7220646f65736e2774206578697374000000000000000000006044820152fd5b346101dc5760606003193601126101dc57610e306117c4565b67ffffffffffffffff906024358281116101dc57610e529036906004016117fd565b6044929192359384116101dc57610e70610e789436906004016117fd565b939092611ae5565b005b346101dc5760206003193601126101dc57610e78600435613022565b346101dc5760006003193601126101dc57610f27610eb333612fca565b600281016000815473ffffffffffffffffffffffffffffffffffffffff811692610ede841515612f7f565b7fffffffffffffffffffffffff000000000000000000000000000000000000000060018601928484549481610f1960038b0197885490612c6c565b99555516905555339061316c565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b16806000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f3697602090808252604060002092600160405194610f8d8661182e565b80548652015493838101948552610fa4828261346d565b156110b6577f1a9d4a5597d6ea11c9f37af1e8c69914b216e3b22aa6ca6e6387f24d7657647d9481518015908161108d575b8251918215611065575b1561104f575b505051908161103a575b50506000528152600060016040822082815501557f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369661102f81546119eb565b9055604051338152a1005b51906000528284526040600020558480610ff0565b6000528486526001604060002001558680610fe6565b817f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369555610fe0565b82517f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369455610fd6565b6064846040519062461bcd60e51b82526004820152601260248201527f4b657920646f6573206e6f7420657869737400000000000000000000000000006044820152fd5b346101dc57611108366117e7565b801561125557816000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369a91602083815260406000205490811561121b575b8382018092116111ec576101986040947f1eaffb28f02e49aa8dce586ac73116a047f91a8116d887ed4e72496a2f10283f96856000528352838660002055336000526111be7f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f3698918285526001886000200154612c6c565b9033600052835273ffffffffffffffffffffffffffffffffffffffff60028760002001541630903390612c7f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b336000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369981526112508360406000206133e9565b611147565b608460405162461bcd60e51b815260206004820152602560248201527f576f726b657220736c6f74732073686f756c642062652067726561746572207460448201527f68616e20300000000000000000000000000000000000000000000000000000006064820152fd5b346101dc5760406003193601126101dc576112d86117c4565b73ffffffffffffffffffffffffffffffffffffffff90818116801561139c5761138e6040926113847f2bd8c5354233e1142193df7977bd89f7ad57b724087278bad86db1e15fc3033b9561137b61132e33612fca565b9160028301805490887fffffffffffffffffffffffff0000000000000000000000000000000000000000831617905561137260036001860154950194855490612c6c565b9133911661316c565b54602435612c6c565b9030903390612c7f565b8151903382526020820152a1005b608460405162461bcd60e51b815260206004820152602860248201527f5061796d656e7420746f6b656e2073686f756c64206265206e6f74207a65726f60448201527f20616464726573730000000000000000000000000000000000000000000000006064820152fd5b346101dc5760806003193601126101dc5760043560243560443573ffffffffffffffffffffffffffffffffffffffff908181168091036101dc576064359367ffffffffffffffff908186116101dc57366023870112156101dc578560040135928284116101dc576024870196602436918660061b0101116101dc5761148c821515612b00565b611497861515612b71565b6114a2811515612be2565b336000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f36986020938185526114e1876002604060002001541615612be2565b60405191608083019182118383101761174657600391604098979698528483528783018981526040840190858252606085019260008452336000528a52604060002094518555519760019889860155600285019151167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055519101556115907fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b16613268565b60005b83811061164757509082916040519660a0880192338952878901526040880152606087015260a060808701525260c08401949260005b8281106115f8577f658bee377ff55ceae5c8883fc1d0ec604e9179fba1a50f0f094091cefa2eef0486880387a1005b90919293958635907fffffffff0000000000000000000000000000000000000000000000000000000082168092036101dc579081528683013583820152604090810196019392919083016115c9565b61165681858a98969798612c2d565b35907fffffffff00000000000000000000000000000000000000000000000000000000821682036101dc5761173d91610b366116d687611697858b8f612c2d565b01356040519283918a8301958690917fffffffff0000000000000000000000000000000000000000000000000000000060249316825260048201520190565b519020336000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369b865260406000209060005285526040600020877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055611a16565b94939294611593565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b346101dc5760006003193601126101dc5760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b6004359073ffffffffffffffffffffffffffffffffffffffff821682036101dc57565b60031960409101126101dc576004359060243590565b9181601f840112156101dc5782359167ffffffffffffffff83116101dc576020808501948460051b0101116101dc57565b6040810190811067ffffffffffffffff82111761174657604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761174657604052565b919082039182116111ec57565b67ffffffffffffffff81116117465760051b60200190565b91908260409103126101dc576040516118c88161182e565b809280517fffffffff00000000000000000000000000000000000000000000000000000000811681036101dc578252602090810151910152565b9060209182818303126101dc5780519067ffffffffffffffff82116101dc570181601f820112156101dc5780519261193984611898565b936040936119498551968761184a565b818652828087019260061b850101938185116101dc578301915b8483106119735750505050505090565b83869161198084866118b0565b815201920191611963565b908160209103126101dc575160038110156101dc5790565b604051906060820182811067ffffffffffffffff8211176117465760405260006040838281528260208201520152565b908160209103126101dc575180151581036101dc5790565b80156111ec577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146111ec5760010190565b9190811015611a535760051b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9190811015611a535760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1813603018212156101dc57019081359167ffffffffffffffff83116101dc576020018260051b360381136101dc579190565b60e05261014052610120919091526040517f7667180800000000000000000000000000000000000000000000000000000000815291907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16602084600481845afa93841561065d576000946129b3575b5073ffffffffffffffffffffffffffffffffffffffff60e051166000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369c60205260406000205484111561296f576040517fc45a0155000000000000000000000000000000000000000000000000000000008152602081600481855afa90811561065d5760009161291b575b50602073ffffffffffffffffffffffffffffffffffffffff916024604051809481937f210530530000000000000000000000000000000000000000000000000000000083528160e051166004840152165afa90811561065d576000916128fc575b50156128b8576020600491604051928380927fac027f970000000000000000000000000000000000000000000000000000000082525afa801561065d57600061018052612860575b50604051917ffc1e5e2a00000000000000000000000000000000000000000000000000000000835260008360048173ffffffffffffffffffffffffffffffffffffffff60e051165afa92831561065d57600093612845575b506040517fedd0d73400000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff60e051165afa801561065d57600060a05261280c575b506040517f6cd1344800000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff60e051165afa90811561065d576000916127da575b506040517f2943dcab00000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff60e051165afa90811561065d576000916127a8575b506040517f108d2f5200000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff60e051165afa90811561065d57600091612774575b50611e5e9161188b565b926040517fb55ec18a00000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff60e051165afa801561065d576000608052612753575b50604051927f9bc6686800000000000000000000000000000000000000000000000000000000845260408460048173ffffffffffffffffffffffffffffffffffffffff60e051165afa93841561065d57600094612712575b50604051957f1763451400000000000000000000000000000000000000000000000000000000875260208760048173ffffffffffffffffffffffffffffffffffffffff60e051165afa96871561065d576000976126db575b50600061010081905292935b848410611fdf57505050505050505061010051611f8c5750565b600281018091116111ec5773ffffffffffffffffffffffffffffffffffffffff60e051166000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369c602052604060002055565b611ff684866101409b9495969798999a9b51611a43565b356101605273ffffffffffffffffffffffffffffffffffffffff610160511661016051036101dc5760805160038110156106d657600181036125f657506040517f055236f400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff6101605116600482015260208160248173ffffffffffffffffffffffffffffffffffffffff60e051165afa90811561065d576000916125d7575b501561256e575b73ffffffffffffffffffffffffffffffffffffffff61016051166000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f36986020526040600020958160018801549754118015612563575b801561254f575b61253d5761212386866101209d9c9b9d51611a82565b949050600060c0525b8460c051101561252357612150612147888861012051611a82565b60c05191611a43565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815260a05160e05173ffffffffffffffffffffffffffffffffffffffff166004830152602482015290359060208180604481010381600073ffffffffffffffffffffffffffffffffffffffff61018051165af1801561065d57612504575b506040516101c0527feebe998f000000000000000000000000000000000000000000000000000000006101c0515273ffffffffffffffffffffffffffffffffffffffff610160511660046101c05101528060246101c051015260206101c05160446101c051600073ffffffffffffffffffffffffffffffffffffffff60e051165af16101a0526101a0511561065d5760009c6101a0516124c5575b9c8b9c9d61227d60a0518c61188b565b806123ec575b507f1c13422d2375fe8a96ddbe3f6e2efc794f2befbfe247217479ef4b68030d42c3916122b160a0926119eb565b9d846000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369a806020526122e96040600020546119eb565b806123d95750856000526020526000604081205573ffffffffffffffffffffffffffffffffffffffff61016051166000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369960205261234c856040600020613530565b6040519173ffffffffffffffffffffffffffffffffffffffff60e051168352602083015260408201527fffffffff000000000000000000000000000000000000000000000000000000008d5116606082015260208d01516080820152a260016101005289156123cc576123c060c051611a16565b60c0529a99989a61212c565b5050505050505050505050565b908660005260205260406000205561234c565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526101605173ffffffffffffffffffffffffffffffffffffffff1660048201526024810191909152919c509060208180604481010381600073ffffffffffffffffffffffffffffffffffffffff61018051165af19c8d1561065d576122b18f9e9360a0937f1c13422d2375fe8a96ddbe3f6e2efc794f2befbfe247217479ef4b68030d42c3956124a6575b5092505091612283565b6124be9060203d60201161065657610648818361184a565b503861249c565b60203d6020116124fd575b806124e06020926101c05161184a565b6101c05190810103126124f9576101c051519d5061226d565b8d80fd5b503d6124d0565b61251c9060203d60201161065657610648818361184a565b50386121d2565b92999a9796509392509361253690611a16565b9293611f72565b93929198979695509361253690611a16565b5061255d84610160516129fb565b1561210d565b5060a0518710612106565b608460405162461bcd60e51b8152602060048201526024808201527f436f6d707574652070726f7669646572206973206e6f7420696e20776869746560448201527f6c697374000000000000000000000000000000000000000000000000000000006064820152fd5b6125f0915060203d60201161065657610648818361184a565b386120a8565b6002036120af576040517f055236f400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff6101605116600482015260208160248173ffffffffffffffffffffffffffffffffffffffff60e051165afa90811561065d576000916126bc575b50156120af57606460405162461bcd60e51b815260206004820152602060248201527f436f6d707574652070726f766964657220697320696e20626c61636b6c6973746044820152fd5b6126d5915060203d60201161065657610648818361184a565b38612672565b90966020823d60201161270a575b816126f66020938361184a565b810103126127075750519538611f66565b80fd5b3d91506126e9565b90936040903d60401161274b575b61272a828461184a565b6040838381010312612707575090612744918101906118b0565b9238611f0e565b3d9150612720565b61276b9060203d60201161099557610987818361184a565b60805238611eb6565b906020823d6020116127a0575b8161278e6020938361184a565b81010312612707575051611e5e611e54565b3d9150612781565b906020823d6020116127d2575b816127c26020938361184a565b8101031261270757505138611dfd565b3d91506127b5565b906020823d602011612804575b816127f46020938361184a565b8101031261270757505138611da6565b3d91506127e7565b6020813d60201161283d575b816128256020938361184a565b81010312612837575160a05238611d4f565b60a05180fd5b3d9150612818565b61285991933d8091833e6109b2818361184a565b9138611cf7565b6020813d6020116128b0575b816128796020938361184a565b810103126128a9575173ffffffffffffffffffffffffffffffffffffffff811681036128a9576101805238611c9f565b6101805180fd5b3d915061286c565b606460405162461bcd60e51b815260206004820152601860248201527f4465616c206973206e6f742066726f6d20666163746f727900000000000000006044820152fd5b612915915060203d60201161065657610648818361184a565b38611c57565b6020813d602011612967575b816129346020938361184a565b8101031261296357519073ffffffffffffffffffffffffffffffffffffffff8216820361270757506020611bf6565b5080fd5b3d9150612927565b606460405162461bcd60e51b815260206004820152601e60248201527f4465616c206973206e6f7420726561647920666f72206d61746368696e6700006044820152fd5b90936020823d6020116129df575b816129ce6020938361184a565b810103126127075750519238611b6a565b3d91506129c1565b8051821015611a535760209160051b010190565b81519160005b838110612a115750505050600190565b60ff7fffffffff00000000000000000000000000000000000000000000000000000000612a3e83856129e7565b515116602080612a4e85876129e7565b510151604080517fffffffff00000000000000000000000000000000000000000000000000000000909416838501908152600481019290925292612a958160248401610b36565b5190209073ffffffffffffffffffffffffffffffffffffffff87166000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369b8152826000209160005252600020541615612af757612af290611a16565b612a01565b50505050600090565b15612b0757565b608460405162461bcd60e51b815260206004820152602c60248201527f4d696e207072696365207065722065706f63682073686f756c6420626520677260448201527f6561746572207468616e203000000000000000000000000000000000000000006064820152fd5b15612b7857565b608460405162461bcd60e51b815260206004820152602760248201527f4d617820636f6c6c61746572616c2073686f756c64206265206772656174657260448201527f207468616e2030000000000000000000000000000000000000000000000000006064820152fd5b15612be957565b606460405162461bcd60e51b815260206004820152601860248201527f436f6d707574652070726f766964657220616c726561647900000000000000006044820152fd5b9190811015611a535760061b0190565b6004357fffffffff00000000000000000000000000000000000000000000000000000000811681036101dc5790565b818102929181159184041417156111ec57565b9290604051927f23b872dd00000000000000000000000000000000000000000000000000000000602085015273ffffffffffffffffffffffffffffffffffffffff809216602485015216604483015260648201526064815260a081019181831067ffffffffffffffff84111761174657612cfb92604052612cfd565b565b73ffffffffffffffffffffffffffffffffffffffff909291921691604051612d248161182e565b6020918282527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564838301526000808285829451910182895af13d15612e85573d9567ffffffffffffffff8711612e5857612dbd94959660405190612daf887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116018361184a565b81528093873d92013e612e91565b805190828215928315612e40575b50505015612dd65750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b612e5093508201810191016119d3565b388281612dcb565b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b612dbd93949591506060915b91929015612ef25750815115612ea5575090565b3b15612eae5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015612f055750805190602001fd5b6040519062461bcd60e51b825281602080600483015282519283602484015260005b848110612f68575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201612f27565b15612f8657565b606460405162461bcd60e51b815260206004820152601e60248201527f436f6d707574652070726f766964657220646f65736e277420657869737400006044820152fd5b73ffffffffffffffffffffffffffffffffffffffff8091166000527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369860205261301f6040600020916002830154161515612f7f565b90565b61302d811515612b71565b61303633612fca565b906001820190815491818314613128578190556003830180549384156131215782847fa8c62389b31fc6dfc3c0ec83e30a55441144e480af1c0721cf27c7c88f29952596826130db97116000146130e05750926130996130a1926130c39561188b565b905490612c6c565b9073ffffffffffffffffffffffffffffffffffffffff6002339201541661316c565b60408051338152602081019290925290918291820190565b0390a1565b61311c945061310f9061310a60029373ffffffffffffffffffffffffffffffffffffffff9561188b565b612c6c565b9201541630903390612c7f565b6130c3565b5050505050565b606460405162461bcd60e51b815260206004820152601a60248201527f4d617820636f6c6c61746572616c206973207468652073616d650000000000006044820152fd5b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff929092166024830152604480830193909352918152612cfb916131ce60648361184a565b612cfd565b91909173ffffffffffffffffffffffffffffffffffffffff60608201931681526004357fffffffff0000000000000000000000000000000000000000000000000000000081168091036101dc5760208201526040602435910152565b6020810190604081018151906001845194868351915201905215908160011461326257501561325c575050565b60200152565b91505052565b80156133a55760008181527f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f369790816020526132c083604083206001604051916132b08361182e565b805483520154602082015261346d565b613361577f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f3695918254907f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f36966133148154611a16565b9055848215613339579060409392916001955585835260205280838320558152200155565b7f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f36945550505055565b606460405162461bcd60e51b815260206004820152601260248201527f4b657920616c72656164792065786973747300000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601260248201527f4b65792063616e6e6f74206265205a45524f00000000000000000000000000006044820152fd5b81156133a55760038101906000908382528260205261342684604084206001604051916134158361182e565b8054835201546020820152836134ed565b61336157600181019284845492600281016134418154611a16565b9055831561346657509060409392916001955585835260205280838320558152200155565b5550505055565b90815115918215926134df575b5081156134b4575b811561348c575090565b90507f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f3695541490565b7f7440c3b83c734284c6dbaabc56e2aab447401ce649d182f2600464c1292f36945481149150613482565b60200151151591503861347a565b8151158015939290613522575b508215613517575b821561350d57505090565b6001015414919050565b805482149250613502565b6020015115159250386134fa565b91909160038101600090848252602081815260409586842060018851916135568361182e565b80548352015483820190815261356d8383896134ed565b156135f4579181600195936002999a959351801590816135eb575b82519182156135e1575b156135cf575b50505190816135bd575b505085525282208281550155016135b981546119eb565b9055565b519087528383528487205538806135a2565b895285855287878a2001553880613598565b818a8d0155613592565b82518b55613588565b6064848a519062461bcd60e51b82526004820152601260248201527f4b657920646f6573206e6f7420657869737400000000000000000000000000006044820152fdfea264697066735822122054d4851f4e39a69d5a23580d5bd97cdb22b5fef2eaf350e19c6051affe38c58d64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7769,
        "contract": "contracts/global/matcher/Matcher.sol:Matcher",
        "label": "_storage",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(ConfigStorage)7766_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDeal)6355": {
        "encoding": "inplace",
        "label": "contract IDeal",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2321": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_struct(Bytes32List)9079_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LinkedListWithUniqueKeys.Bytes32List)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32List)9079_storage"
      },
      "t_mapping(t_address,t_struct(ComputeProvider)7717_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MatcherConfig.ComputeProvider)",
        "numberOfBytes": "32",
        "value": "t_struct(ComputeProvider)7717_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(ComputePeer)7720_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct MatcherConfig.ComputePeer)",
        "numberOfBytes": "32",
        "value": "t_struct(ComputePeer)7720_storage"
      },
      "t_mapping(t_bytes32,t_struct(Element)9067_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LinkedListWithUniqueKeys.Element)",
        "numberOfBytes": "32",
        "value": "t_struct(Element)9067_storage"
      },
      "t_mapping(t_contract(IDeal)6355,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IDeal)6355",
        "label": "mapping(contract IDeal => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Bytes32List)9079_storage": {
        "encoding": "inplace",
        "label": "struct LinkedListWithUniqueKeys.Bytes32List",
        "members": [
          {
            "astId": 9069,
            "contract": "contracts/global/matcher/Matcher.sol:Matcher",
            "label": "_first",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 9071,
            "contract": "contracts/global/matcher/Matcher.sol:Matcher",
            "label": "_last",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 9073,
            "contract": "contracts/global/matcher/Matcher.sol:Matcher",
            "label": "_length",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9078,
            "contract": "contracts/global/matcher/Matcher.sol:Matcher",
            "label": "_elements",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_struct(Element)9067_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(ComputePeer)7720_storage": {
        "encoding": "inplace",
        "label": "struct MatcherConfig.ComputePeer",
        "members": [
          {
            "astId": 7719,
            "contract": "contracts/global/matcher/Matcher.sol:Matcher",
            "label": "freeWorkerSlots",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ComputeProvider)7717_storage": {
        "encoding": "inplace",
        "label": "struct MatcherConfig.ComputeProvider",
        "members": [
          {
            "astId": 7709,
            "contract": "contracts/global/matcher/Matcher.sol:Matcher",
            "label": "minPricePerEpoch",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7711,
            "contract": "contracts/global/matcher/Matcher.sol:Matcher",
            "label": "maxCollateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7714,
            "contract": "contracts/global/matcher/Matcher.sol:Matcher",
            "label": "paymentToken",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC20)2321"
          },
          {
            "astId": 7716,
            "contract": "contracts/global/matcher/Matcher.sol:Matcher",
            "label": "totalFreeWorkerSlots",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(ConfigStorage)7766_storage": {
        "encoding": "inplace",
        "label": "struct MatcherConfig.ConfigStorage",
        "members": [
          {
            "astId": 7739,
            "contract": "contracts/global/matcher/Matcher.sol:Matcher",
            "label": "computeProvidersList",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32List)9079_storage"
          },
          {
            "astId": 7744,
            "contract": "contracts/global/matcher/Matcher.sol:Matcher",
            "label": "computeProviderByOwner",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_struct(ComputeProvider)7717_storage)"
          },
          {
            "astId": 7749,
            "contract": "contracts/global/matcher/Matcher.sol:Matcher",
            "label": "computePeersListByProvider",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(Bytes32List)9079_storage)"
          },
          {
            "astId": 7754,
            "contract": "contracts/global/matcher/Matcher.sol:Matcher",
            "label": "computePeerByPeerId",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_bytes32,t_struct(ComputePeer)7720_storage)"
          },
          {
            "astId": 7760,
            "contract": "contracts/global/matcher/Matcher.sol:Matcher",
            "label": "effectorsByComputeProvider",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
          },
          {
            "astId": 7765,
            "contract": "contracts/global/matcher/Matcher.sol:Matcher",
            "label": "minMatchingEpochByDeal",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_contract(IDeal)6355,t_uint256)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Element)9067_storage": {
        "encoding": "inplace",
        "label": "struct LinkedListWithUniqueKeys.Element",
        "members": [
          {
            "astId": 9064,
            "contract": "contracts/global/matcher/Matcher.sol:Matcher",
            "label": "prev",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 9066,
            "contract": "contracts/global/matcher/Matcher.sol:Matcher",
            "label": "next",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}