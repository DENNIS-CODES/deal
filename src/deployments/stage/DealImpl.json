{
  "address": "0xACbDab377F458b9c29216c41d81036254af72Fe1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IGlobalCore",
          "name": "globalCore_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct CIDV1",
          "name": "newAppCID",
          "type": "tuple"
        }
      ],
      "name": "AppCIDChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ComputeUnitCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ComputeUnitRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "computeUnitId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "computeUnitId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "workerId",
          "type": "bytes32"
        }
      ],
      "name": "WorkerIdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "computeUnitId",
          "type": "bytes32"
        }
      ],
      "name": "WorkerRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "computeUnitId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "lastWorkedEpoch",
          "type": "uint256"
        }
      ],
      "name": "_removeComputeUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "computeUnitCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessType",
      "outputs": [
        {
          "internalType": "enum IConfig.AccessType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "appCID",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CIDV1",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IConfig.AccessType",
          "name": "accessType_",
          "type": "uint8"
        }
      ],
      "name": "changeAccessType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralPerWorker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "computeProvider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "peerId",
          "type": "bytes32"
        }
      ],
      "name": "createComputeUnit",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creationBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "effectors",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CIDV1[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fluenceToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAccessList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getComputeUnit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "peerId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "workerId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "created",
              "type": "uint256"
            }
          ],
          "internalType": "struct IWorkerManager.ComputeUnit",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getComputeUnitCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getComputeUnits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "peerId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "workerId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "created",
              "type": "uint256"
            }
          ],
          "internalType": "struct IWorkerManager.ComputeUnit[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFreeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxPaidEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "computeUnitId",
          "type": "bytes32"
        }
      ],
      "name": "getRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStatus",
      "outputs": [
        {
          "internalType": "enum IDeal.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "computeUnitId",
          "type": "bytes32"
        }
      ],
      "name": "getUnlockCollateralEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CIDV1",
          "name": "appCID_",
          "type": "tuple"
        },
        {
          "internalType": "contract IERC20",
          "name": "paymentToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralPerWorker_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minWorkers_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetWorkers_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxWorkersPerProvider_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pricePerWorkerEpoch_",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CIDV1[]",
          "name": "effectors_",
          "type": "tuple[]"
        },
        {
          "internalType": "enum IConfig.AccessType",
          "name": "accessType_",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "accessList_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isInAccessList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxWorkersPerProvider",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minWorkers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerWorkerEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "computeUnitId",
          "type": "bytes32"
        }
      ],
      "name": "removeComputeUnit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "removeFromAccessList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CIDV1",
          "name": "appCID_",
          "type": "tuple"
        }
      ],
      "name": "setAppCID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "computeUnitId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "workerId",
          "type": "bytes32"
        }
      ],
      "name": "setWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetWorkers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "computeUnitId",
          "type": "bytes32"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "computeUnitId",
          "type": "bytes32"
        }
      ],
      "name": "withdrawRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xddc076d24f0c57a4f0d3338c364f4f4eff79edddf720fff204904c8d55fec893",
  "receipt": {
    "to": null,
    "from": "0x2d088Ee84734642faa983382cCD1b75E9b49318e",
    "contractAddress": "0xACbDab377F458b9c29216c41d81036254af72Fe1",
    "transactionIndex": 4,
    "gasUsed": "3715898",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000004000000000a00000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000200000000000000000004000000000000000000000000000000080000000000000000000200000000000000000000000000401000000000000000000000000000000004000000000000000000001000000040000000000000000000000100000000000000000000000000000000000000000000010000000000000000000000000100000",
    "blockHash": "0x633151bc5a18a58cc52b8526801978e931ca722d4040c1b5b0296178150a8587",
    "transactionHash": "0xddc076d24f0c57a4f0d3338c364f4f4eff79edddf720fff204904c8d55fec893",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 41163112,
        "transactionHash": "0xddc076d24f0c57a4f0d3338c364f4f4eff79edddf720fff204904c8d55fec893",
        "address": "0xACbDab377F458b9c29216c41d81036254af72Fe1",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 16,
        "blockHash": "0x633151bc5a18a58cc52b8526801978e931ca722d4040c1b5b0296178150a8587"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 41163112,
        "transactionHash": "0xddc076d24f0c57a4f0d3338c364f4f4eff79edddf720fff204904c8d55fec893",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000002d088ee84734642faa983382ccd1b75e9b49318e",
          "0x00000000000000000000000004ba3ef4c023c1006019a0f9baf6e70455e41fcf"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000015de4b8e5ecea400000000000000000000000000000000000000000000000012263786044154f8000000000000000000000000000000000000000000000008ce92aa79fc3361400000000000000000000000000000000000000000000000001210593a75e28654000000000000000000000000000000000000000000000008cea888c58a922fe4",
        "logIndex": 17,
        "blockHash": "0x633151bc5a18a58cc52b8526801978e931ca722d4040c1b5b0296178150a8587"
      }
    ],
    "blockNumber": 41163112,
    "cumulativeGasUsed": "27720237",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8773355509c9a534A43Ce439E49EBFba928D048E"
  ],
  "numDeployments": 1,
  "solcInputHash": "5888c99064a7bc8bd95da4c81fe2a78b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IGlobalCore\",\"name\":\"globalCore_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct CIDV1\",\"name\":\"newAppCID\",\"type\":\"tuple\"}],\"name\":\"AppCIDChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ComputeUnitCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ComputeUnitRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"computeUnitId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"computeUnitId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"workerId\",\"type\":\"bytes32\"}],\"name\":\"WorkerIdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"computeUnitId\",\"type\":\"bytes32\"}],\"name\":\"WorkerRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"computeUnitId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"lastWorkedEpoch\",\"type\":\"uint256\"}],\"name\":\"_removeComputeUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"computeUnitCount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessType\",\"outputs\":[{\"internalType\":\"enum IConfig.AccessType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"appCID\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct CIDV1\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IConfig.AccessType\",\"name\":\"accessType_\",\"type\":\"uint8\"}],\"name\":\"changeAccessType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralPerWorker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"computeProvider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"}],\"name\":\"createComputeUnit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"effectors\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct CIDV1[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fluenceToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccessList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getComputeUnit\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"workerId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"internalType\":\"struct IWorkerManager.ComputeUnit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getComputeUnitCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getComputeUnits\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"workerId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"internalType\":\"struct IWorkerManager.ComputeUnit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFreeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxPaidEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"computeUnitId\",\"type\":\"bytes32\"}],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum IDeal.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"computeUnitId\",\"type\":\"bytes32\"}],\"name\":\"getUnlockCollateralEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct CIDV1\",\"name\":\"appCID_\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20\",\"name\":\"paymentToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralPerWorker_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWorkers_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWorkers_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWorkersPerProvider_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerWorkerEpoch_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct CIDV1[]\",\"name\":\"effectors_\",\"type\":\"tuple[]\"},{\"internalType\":\"enum IConfig.AccessType\",\"name\":\"accessType_\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"accessList_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isInAccessList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWorkersPerProvider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWorkers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerWorkerEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"computeUnitId\",\"type\":\"bytes32\"}],\"name\":\"removeComputeUnit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeFromAccessList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct CIDV1\",\"name\":\"appCID_\",\"type\":\"tuple\"}],\"name\":\"setAppCID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"computeUnitId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"workerId\",\"type\":\"bytes32\"}],\"name\":\"setWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetWorkers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"computeUnitId\",\"type\":\"bytes32\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"computeUnitId\",\"type\":\"bytes32\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deal/Deal.sol\":\"Deal\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xac946730f979a447732a5bed58aa30c995ae666c3e1663b312ab5fd11dbe3eb6\",\"license\":\"MIT\"},\"contracts/deal/Config.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../utils/LinkedListWithUniqueKeys.sol\\\";\\nimport \\\"./interfaces/IConfig.sol\\\";\\nimport \\\"../global/interfaces/IGlobalCore.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\n\\ncontract Config is Initializable, IConfig, Ownable {\\n    using LinkedListWithUniqueKeys for LinkedListWithUniqueKeys.Bytes32List;\\n\\n    // ------------------ Storage ------------------\\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\\\"fluence.deal.storage.v1.config\\\")) - 1);\\n\\n    struct ConfigStorage {\\n        uint256 creationBlock;\\n        CIDV1 appCID;\\n        // --- deal config ---\\n        IERC20 paymentToken;\\n        uint256 collateralPerWorker;\\n        uint256 minWorkers;\\n        uint256 targetWorkers;\\n        uint256 maxWorkersPerProvider;\\n        uint256 pricePerWorkerEpoch;\\n        CIDV1[] effectors;\\n        // --- access ---\\n        AccessType accessType;\\n        LinkedListWithUniqueKeys.Bytes32List accessList;\\n    }\\n\\n    ConfigStorage private _storage;\\n\\n    function _getConfigStorage() private pure returns (ConfigStorage storage s) {\\n        bytes32 storageSlot = _STORAGE_SLOT;\\n        assembly {\\n            s.slot := storageSlot\\n        }\\n    }\\n\\n    // ------------------ Immutable ------------------\\n    IERC20 private immutable _fluenceToken;\\n    IGlobalCore private immutable _globalCore_;\\n\\n    // ------------------ Constructor ------------------\\n    constructor(IGlobalCore globalCore_) {\\n        _globalCore_ = globalCore_;\\n        _fluenceToken = globalCore_.fluenceToken();\\n    }\\n\\n    // ------------------ Initializer ------------------\\n    function __Config_init(\\n        CIDV1 calldata appCID_,\\n        IERC20 paymentToken_,\\n        uint256 collateralPerWorker_,\\n        uint256 minWorkers_,\\n        uint256 targetWorkers_,\\n        uint256 maxWorkersPerProvider_,\\n        uint256 pricePerWorkerEpoch_,\\n        CIDV1[] calldata effectors_,\\n        AccessType accessType_,\\n        address[] calldata accessList_,\\n        address owner_\\n    ) internal onlyInitializing {\\n        __Ownable_init(owner_);\\n\\n        __Config_init_unchained(\\n            paymentToken_,\\n            collateralPerWorker_,\\n            minWorkers_,\\n            targetWorkers_,\\n            maxWorkersPerProvider_,\\n            pricePerWorkerEpoch_,\\n            effectors_,\\n            accessType_,\\n            accessList_\\n        );\\n\\n        _setAppCID(appCID_);\\n    }\\n\\n    function __Config_init_unchained(\\n        IERC20 paymentToken_,\\n        uint256 collateralPerWorker_,\\n        uint256 minWorkers_,\\n        uint256 targetWorkers_,\\n        uint256 maxWorkersPerProvider_,\\n        uint256 pricePerWorkerEpoch_,\\n        CIDV1[] calldata effectors_,\\n        AccessType accessType_,\\n        address[] calldata accessList_\\n    ) internal onlyInitializing {\\n        ConfigStorage storage configStorage = _getConfigStorage();\\n\\n        configStorage.creationBlock = block.number;\\n\\n        // --- init deal config ---\\n        configStorage.paymentToken = paymentToken_;\\n        configStorage.collateralPerWorker = collateralPerWorker_;\\n        configStorage.minWorkers = minWorkers_;\\n        configStorage.targetWorkers = targetWorkers_;\\n        configStorage.maxWorkersPerProvider = maxWorkersPerProvider_;\\n        configStorage.pricePerWorkerEpoch = pricePerWorkerEpoch_;\\n\\n        for (uint256 i = 0; i < effectors_.length; i++) {\\n            configStorage.effectors.push(effectors_[i]);\\n        }\\n\\n        configStorage.accessType = accessType_;\\n\\n        for (uint256 i = 0; i < accessList_.length; i++) {\\n            configStorage.accessList.push(bytes32(bytes20(accessList_[i])));\\n        }\\n    }\\n\\n    // ------------------ View Internal Functions ------------------\\n    function _globalCore() internal view returns (IGlobalCore) {\\n        return _globalCore_;\\n    }\\n\\n    // ------------------ Mutable Internal Functions ------------------\\n    function _setAppCID(CIDV1 calldata appCID_) internal {\\n        _getConfigStorage().appCID = appCID_;\\n\\n        emit AppCIDChanged(appCID_);\\n    }\\n\\n    // ------------------ View Functions ---------------------\\n    function paymentToken() public view returns (IERC20) {\\n        return _getConfigStorage().paymentToken;\\n    }\\n\\n    function fluenceToken() public view returns (IERC20) {\\n        return _fluenceToken;\\n    }\\n\\n    function creationBlock() public view returns (uint256) {\\n        return _getConfigStorage().creationBlock;\\n    }\\n\\n    function pricePerWorkerEpoch() public view returns (uint256) {\\n        return _getConfigStorage().pricePerWorkerEpoch;\\n    }\\n\\n    function targetWorkers() public view returns (uint256) {\\n        return _getConfigStorage().targetWorkers;\\n    }\\n\\n    function collateralPerWorker() public view returns (uint256) {\\n        return _getConfigStorage().collateralPerWorker;\\n    }\\n\\n    function minWorkers() public view returns (uint256) {\\n        return _getConfigStorage().minWorkers;\\n    }\\n\\n    function effectors() public view returns (CIDV1[] memory) {\\n        return _getConfigStorage().effectors;\\n    }\\n\\n    function accessType() public view returns (AccessType) {\\n        return _getConfigStorage().accessType;\\n    }\\n\\n    function isInAccessList(address addr) public view returns (bool) {\\n        return _getConfigStorage().accessList.has(bytes32(bytes20(addr)));\\n    }\\n\\n    function getAccessList() public view returns (address[] memory) {\\n        bytes32[] memory result = _getConfigStorage().accessList.toArray();\\n\\n        /*\\n        TODO: mv to assembly\\n        uint256 length = result.length;\\n        assembly (\\\"memory-safe\\\") {\\n            return(result, mul(length, 32))\\n        }*/\\n\\n        address[] memory result2 = new address[](result.length);\\n        for (uint256 i = 0; i < result.length; i++) {\\n            result2[i] = address(bytes20(result[i]));\\n        }\\n\\n        return result2;\\n    }\\n\\n    function appCID() external view returns (CIDV1 memory) {\\n        return _getConfigStorage().appCID;\\n    }\\n\\n    function maxWorkersPerProvider() public view returns (uint256) {\\n        return _getConfigStorage().maxWorkersPerProvider;\\n    }\\n\\n    // ------------------ Mutable Functions ------------------\\n    function setAppCID(CIDV1 calldata appCID_) public onlyOwner {\\n        _setAppCID(appCID_);\\n    }\\n\\n    function changeAccessType(AccessType accessType_) external onlyOwner {\\n        _getConfigStorage().accessType = accessType_;\\n    }\\n\\n    function removeFromAccessList(address addr) external onlyOwner {\\n        _getConfigStorage().accessList.remove(bytes32(bytes20(addr)));\\n    }\\n}\\n\",\"keccak256\":\"0x1fd0cd23bbcdc083ad50a26e099ec25382acafe7bd2eea29d4b047138cc3f18c\",\"license\":\"Apache-2.0\"},\"contracts/deal/Deal.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./DealStorageUtils.sol\\\";\\nimport \\\"./WorkerManager.sol\\\";\\nimport \\\"./interfaces/IDeal.sol\\\";\\nimport \\\"./interfaces/IConfig.sol\\\";\\nimport \\\"../global/interfaces/IGlobalCore.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract Deal is WorkerManager, IDeal {\\n    using BitMaps for BitMaps.BitMap;\\n    using SafeERC20 for IERC20;\\n    using DealStorageUtils for DealStorageUtils.Balance;\\n\\n    // ------------------ Constants ------------------\\n    uint256 private constant _MIN_EPOCH_FOR_BALANCE_AMOUNT = 2;\\n    uint256 private constant _EPOCH_FOR_ENDING = 2;\\n\\n    // ------------------ Types ------------------\\n    struct ComputeUnitPaymentInfo {\\n        uint256 startedEpoch;\\n        uint256 gapsDelta;\\n    }\\n\\n    // ------------------ Storage ------------------\\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\\\"fluence.deal.storage.v1.deal\\\")) - 1);\\n\\n    struct DealStorage {\\n        uint totalBalance;\\n        uint lockedBalance;\\n        uint gapsEpochCount;\\n        uint256 maxPaidEpoch;\\n        uint256 lastCommitedEpoch;\\n        mapping(bytes32 => ComputeUnitPaymentInfo) cUnitPaymentInfo;\\n        bool isEnded;\\n        uint endedEpoch;\\n    }\\n\\n    DealStorage private _storage;\\n\\n    function _getDealStorage() private pure returns (DealStorage storage s) {\\n        bytes32 storageSlot = _STORAGE_SLOT;\\n        assembly {\\n            s.slot := storageSlot\\n        }\\n    }\\n\\n    // ------------------ Constructor ---------------------\\n    constructor(IGlobalCore globalCore_) Config(globalCore_) {\\n        _disableInitializers();\\n    }\\n\\n    // ------------------ Init ------------------\\n    function initialize(\\n        CIDV1 calldata appCID_,\\n        IERC20 paymentToken_,\\n        uint256 collateralPerWorker_,\\n        uint256 minWorkers_,\\n        uint256 targetWorkers_,\\n        uint256 maxWorkersPerProvider_,\\n        uint256 pricePerWorkerEpoch_,\\n        CIDV1[] calldata effectors_,\\n        IConfig.AccessType accessType_,\\n        address[] calldata accessList_,\\n        address owner_\\n    ) public initializer {\\n        __Config_init(\\n            appCID_,\\n            paymentToken_,\\n            collateralPerWorker_,\\n            minWorkers_,\\n            targetWorkers_,\\n            maxWorkersPerProvider_,\\n            pricePerWorkerEpoch_,\\n            effectors_,\\n            accessType_,\\n            accessList_,\\n            owner_\\n        );\\n    }\\n\\n    // ------------------ Privat Functions ------------------\\n    function _calculateMaxPaidEpoch(\\n        uint currentEpoch,\\n        uint totalBalance,\\n        uint pricePerWorkerEpoch_,\\n        uint workerCount\\n    ) private pure returns (uint256) {\\n        return currentEpoch + totalBalance / (pricePerWorkerEpoch_ * workerCount);\\n    }\\n\\n    function _preCommitPeriod(\\n        DealStorageUtils.Balance memory balance,\\n        uint currentEpoch,\\n        uint maxPaidEpoch,\\n        uint lastCommitedEpoch,\\n        uint currentWorkerCount,\\n        uint pricePerWorkerEpoch_\\n    ) private pure {\\n        if (currentEpoch > maxPaidEpoch && maxPaidEpoch > lastCommitedEpoch) {\\n            uint amount = (maxPaidEpoch - lastCommitedEpoch) * pricePerWorkerEpoch_ * currentWorkerCount;\\n\\n            balance.setTotalBalance(balance.getTotalBalance() - amount);\\n            balance.setLockedBalance(balance.getLockedBalance() + amount);\\n            balance.setGapsEpochCount(balance.getGapsEpochCount() + (currentEpoch - maxPaidEpoch));\\n        } else if (currentEpoch > maxPaidEpoch && lastCommitedEpoch >= maxPaidEpoch) {\\n            balance.setGapsEpochCount(balance.getGapsEpochCount() + (currentEpoch - lastCommitedEpoch));\\n        } else if (currentEpoch <= maxPaidEpoch) {\\n            uint amount = (currentEpoch - lastCommitedEpoch) * pricePerWorkerEpoch_ * currentWorkerCount;\\n\\n            balance.setTotalBalance(balance.getTotalBalance() - amount);\\n            balance.setLockedBalance(balance.getLockedBalance() + amount);\\n        }\\n    }\\n\\n    function _postCommitPeriod(DealStorageUtils.Balance memory balance, uint currentEpoch) private {\\n        DealStorage storage dealStorage = _getDealStorage();\\n\\n        balance.commitToStorage(dealStorage);\\n        dealStorage.lastCommitedEpoch = currentEpoch;\\n    }\\n\\n    // ------------------ Public View Functions ------------------\\n    function getStatus() public view returns (Status) {\\n        if (_getDealStorage().isEnded) {\\n            return Status.ENDED;\\n        }\\n\\n        uint currentEpoch = _globalCore().currentEpoch();\\n        uint maxPaidEpoch = _getDealStorage().maxPaidEpoch;\\n\\n        if (getComputeUnitCount() < minWorkers()) {\\n            return Status.INACTIVE;\\n        } else if (currentEpoch > maxPaidEpoch) {\\n            return Status.INACTIVE;\\n        } else {\\n            return Status.ACTIVE;\\n        }\\n    }\\n\\n    function getFreeBalance() public view returns (uint256) {\\n        DealStorage storage dealStorage = _getDealStorage();\\n\\n        uint currentEpoch = _globalCore().currentEpoch();\\n        if (currentEpoch > dealStorage.maxPaidEpoch) {\\n            return 0;\\n        }\\n        return dealStorage.totalBalance - ((currentEpoch - dealStorage.lastCommitedEpoch) * pricePerWorkerEpoch() * getComputeUnitCount());\\n    }\\n\\n    function getRewardAmount(bytes32 computeUnitId) public view returns (uint) {\\n        DealStorage storage dealStorage = _getDealStorage();\\n        ComputeUnitPaymentInfo storage computeUnitPaymentInfo = dealStorage.cUnitPaymentInfo[computeUnitId];\\n\\n        uint currentEpoch = _globalCore().currentEpoch();\\n        uint workerCount = getComputeUnitCount();\\n        uint pricePerWorkerEpoch_ = pricePerWorkerEpoch();\\n\\n        DealStorageUtils.Balance memory balance = DealStorageUtils.initCache(dealStorage);\\n        _preCommitPeriod(balance, currentEpoch, dealStorage.maxPaidEpoch, dealStorage.lastCommitedEpoch, workerCount, pricePerWorkerEpoch_);\\n\\n        uint reward = ((currentEpoch - computeUnitPaymentInfo.startedEpoch) -\\n            (balance.getGapsEpochCount() - computeUnitPaymentInfo.gapsDelta)) * pricePerWorkerEpoch_;\\n\\n        return reward;\\n    }\\n\\n    function getMaxPaidEpoch() public view returns (uint256) {\\n        return _getDealStorage().maxPaidEpoch;\\n    }\\n\\n    // ------------------ Public Mutable Functions ------------------\\n    function deposit(uint256 amount) external onlyOwner {\\n        DealStorage storage dealStorage = _getDealStorage();\\n\\n        uint currentEpoch = _globalCore().currentEpoch();\\n        uint workerCount = getComputeUnitCount();\\n        uint pricePerWorkerEpoch_ = pricePerWorkerEpoch();\\n\\n        DealStorageUtils.Balance memory balance = DealStorageUtils.initCache(dealStorage);\\n        _preCommitPeriod(balance, currentEpoch, dealStorage.maxPaidEpoch, dealStorage.lastCommitedEpoch, workerCount, pricePerWorkerEpoch_);\\n\\n        balance.setTotalBalance(balance.getTotalBalance() + amount);\\n\\n        dealStorage.maxPaidEpoch = _calculateMaxPaidEpoch(currentEpoch, balance.getTotalBalance(), pricePerWorkerEpoch_, workerCount);\\n\\n        _postCommitPeriod(balance, currentEpoch);\\n\\n        paymentToken().safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit Deposited(amount);\\n    }\\n\\n    function withdraw(uint256 amount) external onlyOwner {\\n        DealStorage storage dealStorage = _getDealStorage();\\n\\n        uint currentEpoch = _globalCore().currentEpoch();\\n        uint workerCount = getComputeUnitCount();\\n        uint pricePerWorkerEpoch_ = pricePerWorkerEpoch();\\n\\n        if (dealStorage.isEnded) {\\n            require(currentEpoch > dealStorage.endedEpoch + _EPOCH_FOR_ENDING, \\\"Can't withdraw before 2 epochs after deal end\\\");\\n            dealStorage.totalBalance -= amount;\\n        } else {\\n            DealStorageUtils.Balance memory balance = DealStorageUtils.initCache(dealStorage);\\n            _preCommitPeriod(\\n                balance,\\n                currentEpoch,\\n                dealStorage.maxPaidEpoch,\\n                dealStorage.lastCommitedEpoch,\\n                workerCount,\\n                pricePerWorkerEpoch_\\n            );\\n\\n            balance.setTotalBalance(balance.getTotalBalance() - amount);\\n\\n            uint minBalance = _MIN_EPOCH_FOR_BALANCE_AMOUNT * pricePerWorkerEpoch_ * targetWorkers();\\n            require(balance.getTotalBalance() >= minBalance, \\\"Free balance needs to cover minimum 2 epochs\\\");\\n\\n            dealStorage.maxPaidEpoch = _calculateMaxPaidEpoch(currentEpoch, balance.getTotalBalance(), pricePerWorkerEpoch_, workerCount);\\n            _postCommitPeriod(balance, currentEpoch);\\n        }\\n\\n        paymentToken().safeTransfer(msg.sender, amount);\\n\\n        emit Withdrawn(amount);\\n    }\\n\\n    function withdrawRewards(bytes32 computeUnitId) external {\\n        DealStorage storage dealStorage = _getDealStorage();\\n        ComputeUnitPaymentInfo storage computeUnitPaymentInfo = dealStorage.cUnitPaymentInfo[computeUnitId];\\n\\n        uint currentEpoch = _globalCore().currentEpoch();\\n        uint workerCount = getComputeUnitCount();\\n        uint pricePerWorkerEpoch_ = pricePerWorkerEpoch();\\n\\n        DealStorageUtils.Balance memory balance = DealStorageUtils.initCache(dealStorage);\\n        _preCommitPeriod(balance, currentEpoch, dealStorage.maxPaidEpoch, dealStorage.lastCommitedEpoch, workerCount, pricePerWorkerEpoch_);\\n\\n        uint globalGapsEpochCount = balance.getGapsEpochCount();\\n\\n        uint reward = ((currentEpoch - computeUnitPaymentInfo.startedEpoch) - (globalGapsEpochCount - computeUnitPaymentInfo.gapsDelta)) *\\n            pricePerWorkerEpoch_;\\n\\n        require(reward > 0, \\\"No rewards\\\");\\n\\n        computeUnitPaymentInfo.startedEpoch = currentEpoch;\\n        computeUnitPaymentInfo.gapsDelta = globalGapsEpochCount;\\n\\n        balance.setLockedBalance(balance.getLockedBalance() - reward);\\n\\n        _postCommitPeriod(balance, currentEpoch);\\n\\n        paymentToken().safeTransfer(msg.sender, reward);\\n\\n        emit RewardWithdrawn(computeUnitId, reward);\\n    }\\n\\n    function createComputeUnit(address computeProvider, bytes32 peerId) public returns (bytes32) {\\n        DealStorage storage dealStorage = _getDealStorage();\\n\\n        uint currentEpoch = _globalCore().currentEpoch();\\n        (bytes32 computeUnitId, uint newComputeUnitCount) = _createComputeUnit(currentEpoch, computeProvider, peerId);\\n        uint pricePerWorkerEpoch_ = pricePerWorkerEpoch();\\n\\n        ComputeUnitPaymentInfo storage computeUnitPaymentInfo = dealStorage.cUnitPaymentInfo[computeUnitId];\\n\\n        uint maxPaidEpoch = dealStorage.maxPaidEpoch;\\n        DealStorageUtils.Balance memory balance = DealStorageUtils.initCache(dealStorage);\\n        _preCommitPeriod(balance, currentEpoch, maxPaidEpoch, dealStorage.lastCommitedEpoch, newComputeUnitCount - 1, pricePerWorkerEpoch_);\\n\\n        if (newComputeUnitCount >= minWorkers() && maxPaidEpoch > currentEpoch) {\\n            dealStorage.maxPaidEpoch = _calculateMaxPaidEpoch(\\n                currentEpoch,\\n                balance.getTotalBalance(),\\n                pricePerWorkerEpoch_,\\n                newComputeUnitCount\\n            );\\n        }\\n\\n        _postCommitPeriod(balance, currentEpoch);\\n\\n        computeUnitPaymentInfo.startedEpoch = currentEpoch;\\n        computeUnitPaymentInfo.gapsDelta = balance.getGapsEpochCount();\\n\\n        return computeUnitId;\\n    }\\n\\n    function removeComputeUnit(bytes32 computeUnitId) public {\\n        DealStorage storage dealStorage = _getDealStorage();\\n\\n        uint currentEpoch = _globalCore().currentEpoch();\\n        uint newComputeUnitCount = _removeComputeUnit(computeUnitId, dealStorage.isEnded ? dealStorage.endedEpoch : currentEpoch);\\n        uint pricePerWorkerEpoch_ = pricePerWorkerEpoch();\\n        uint maxPaidEpoch = _getDealStorage().maxPaidEpoch;\\n\\n        DealStorageUtils.Balance memory balance = DealStorageUtils.initCache(dealStorage);\\n        _preCommitPeriod(balance, currentEpoch, maxPaidEpoch, dealStorage.lastCommitedEpoch, newComputeUnitCount + 1, pricePerWorkerEpoch_);\\n\\n        uint minWorkers_ = minWorkers();\\n        if (newComputeUnitCount < minWorkers_ && maxPaidEpoch > currentEpoch) {\\n            dealStorage.maxPaidEpoch = currentEpoch;\\n        } else if (newComputeUnitCount >= minWorkers_) {\\n            dealStorage.maxPaidEpoch = _calculateMaxPaidEpoch(\\n                currentEpoch,\\n                balance.getTotalBalance(),\\n                pricePerWorkerEpoch_,\\n                newComputeUnitCount\\n            );\\n        }\\n\\n        _postCommitPeriod(balance, currentEpoch);\\n    }\\n\\n    function stop() external onlyOwner {\\n        DealStorage storage dealStorage = _getDealStorage();\\n\\n        DealStorageUtils.Balance memory balance = DealStorageUtils.initCache(dealStorage);\\n        uint currentEpoch = _globalCore().currentEpoch();\\n        uint maxPaidEpoch = _getDealStorage().maxPaidEpoch;\\n\\n        _preCommitPeriod(balance, currentEpoch, maxPaidEpoch, dealStorage.lastCommitedEpoch, getComputeUnitCount(), pricePerWorkerEpoch());\\n        _postCommitPeriod(balance, currentEpoch);\\n        if (maxPaidEpoch > currentEpoch) {\\n            dealStorage.maxPaidEpoch = currentEpoch;\\n        }\\n\\n        dealStorage.isEnded = true;\\n        dealStorage.endedEpoch = currentEpoch;\\n    }\\n}\\n\",\"keccak256\":\"0x0f251bcb58d662ea1f842239610489e4d184056af263a0426edaf117ceddc32a\",\"license\":\"Apache-2.0\"},\"contracts/deal/DealStorageUtils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./Deal.sol\\\";\\n\\nlibrary DealStorageUtils {\\n    // ------------------ TYPES ------------------\\n    struct Balance {\\n        uint _initTotalBalance;\\n        uint _initLockedBalance;\\n        uint _initGapsEpochCount;\\n        uint _totalBalance;\\n        uint _lockedBalance;\\n        uint _gapsEpochCount;\\n    }\\n\\n    // ------------------ VIEWS ------------------\\n    function getTotalBalance(Balance memory self) internal pure returns (uint) {\\n        return self._totalBalance;\\n    }\\n\\n    function getLockedBalance(Balance memory self) internal pure returns (uint) {\\n        return self._lockedBalance;\\n    }\\n\\n    function getGapsEpochCount(Balance memory self) internal pure returns (uint) {\\n        return self._gapsEpochCount;\\n    }\\n\\n    // ------------------ MUTABLES ------------------\\n    function initCache(Deal.DealStorage storage dealStorage) internal view returns (Balance memory) {\\n        uint totalBalance = dealStorage.totalBalance;\\n        uint lockedBalance = dealStorage.lockedBalance;\\n        uint gapsEpochCount = dealStorage.gapsEpochCount;\\n\\n        return\\n            Balance({\\n                _initTotalBalance: totalBalance,\\n                _initLockedBalance: lockedBalance,\\n                _initGapsEpochCount: gapsEpochCount,\\n                _totalBalance: totalBalance,\\n                _lockedBalance: lockedBalance,\\n                _gapsEpochCount: gapsEpochCount\\n            });\\n    }\\n\\n    function setTotalBalance(Balance memory self, uint totalBalance) internal pure {\\n        self._totalBalance = totalBalance;\\n    }\\n\\n    function setLockedBalance(Balance memory self, uint lockedBalance) internal pure {\\n        self._lockedBalance = lockedBalance;\\n    }\\n\\n    function setGapsEpochCount(Balance memory self, uint gapsEpochCount) internal pure {\\n        self._gapsEpochCount = gapsEpochCount;\\n    }\\n\\n    function commitToStorage(Balance memory self, Deal.DealStorage storage dealStorage) internal {\\n        if (self._initTotalBalance != self._totalBalance) {\\n            dealStorage.totalBalance = self._totalBalance;\\n        }\\n\\n        if (self._initLockedBalance != self._lockedBalance) {\\n            dealStorage.lockedBalance = self._lockedBalance;\\n        }\\n\\n        if (self._initGapsEpochCount != self._gapsEpochCount) {\\n            dealStorage.gapsEpochCount = self._gapsEpochCount;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60f2852d9cd8f6c13eff3e74ae35165d63c504de98a8a517af7aaf7c499a6ee8\",\"license\":\"Apache-2.0\"},\"contracts/deal/WorkerManager.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./Config.sol\\\";\\nimport \\\"./interfaces/IWorkerManager.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nabstract contract WorkerManager is Config, IWorkerManager {\\n    using LinkedListWithUniqueKeys for LinkedListWithUniqueKeys.Bytes32List;\\n    using SafeERC20 for IERC20;\\n\\n    // ------------------ Types ------------------\\n    struct ComputeProviderInfo {\\n        uint256 computeUnitCount;\\n        LinkedListWithUniqueKeys.Bytes32List computeUnitsIds;\\n    }\\n\\n    // ------------------ Storage ------------------\\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\\\"fluence.deal.storage.v1.workerManager\\\")) - 1);\\n\\n    struct WorkerManagerStorage {\\n        // global area\\n        uint256 computeUnitCount;\\n        mapping(address => ComputeProviderInfo) computeProviderInfo;\\n        // compute units area\\n        mapping(bytes32 => ComputeUnit) computeUnitById;\\n        LinkedListWithUniqueKeys.Bytes32List computeUnitsIdsList;\\n        mapping(bytes32 => uint256) collateralWithdrawEpochByComputeUnitId;\\n    }\\n\\n    WorkerManagerStorage private _storage;\\n\\n    function _getWorkerManagerStorage() private pure returns (WorkerManagerStorage storage s) {\\n        bytes32 storageSlot = _STORAGE_SLOT;\\n\\n        assembly {\\n            s.slot := storageSlot\\n        }\\n    }\\n\\n    // ------------------ Constants ------------------\\n    bytes32 private constant _COMPUTE_UNIT_ID_PREFIX = keccak256(\\\"fluence.computeUnit.\\\");\\n    uint256 private constant _WITHDRAW_EPOCH_TIMEOUT = 2;\\n\\n    // ------------------ Internal Mutable Functions ------------------\\n    function _createComputeUnit(\\n        uint createdEpoch,\\n        address computeProvider,\\n        bytes32 peerId\\n    ) internal returns (bytes32 id, uint computeUnitCount) {\\n        WorkerManagerStorage storage workerStorage = _getWorkerManagerStorage();\\n\\n        // check target workers count\\n        uint256 globalComputeUnitCount = workerStorage.computeUnitCount;\\n        require(globalComputeUnitCount < targetWorkers(), \\\"Target workers reached\\\");\\n\\n        // check peerId isn't exist\\n        id = keccak256(abi.encodePacked(_COMPUTE_UNIT_ID_PREFIX, computeProvider, peerId));\\n        require(workerStorage.computeUnitById[id].owner == address(0x00), \\\"Id already used\\\");\\n\\n        // check max workers per compute provider\\n        uint256 computeUnitCountByCP = workerStorage.computeProviderInfo[computeProvider].computeUnitCount;\\n        require(computeUnitCountByCP < maxWorkersPerProvider(), \\\"Max workers per compute provider reached\\\");\\n\\n        // increase computeUnit count\\n        workerStorage.computeProviderInfo[computeProvider].computeUnitCount = ++computeUnitCountByCP;\\n        workerStorage.computeUnitCount = ++globalComputeUnitCount;\\n\\n        // get required collateral\\n        uint256 collateral = collateralPerWorker();\\n\\n        // create ComputeUnit\\n        workerStorage.computeUnitById[id] = ComputeUnit({\\n            id: id,\\n            peerId: peerId,\\n            workerId: bytes32(0),\\n            owner: computeProvider,\\n            collateral: collateral,\\n            created: createdEpoch\\n        });\\n\\n        // add ComputeUnit to list\\n        workerStorage.computeUnitsIdsList.push(id);\\n\\n        emit ComputeUnitCreated(id, computeProvider);\\n\\n        // transfer collateral\\n        fluenceToken().safeTransferFrom(msg.sender, address(this), collateral);\\n\\n        return (id, globalComputeUnitCount);\\n    }\\n\\n    function _removeComputeUnit(bytes32 computeUnitId, uint lastWorkedEpoch) public returns (uint computeUnitCount) {\\n        WorkerManagerStorage storage workerStorage = _getWorkerManagerStorage();\\n\\n        // check owner\\n        address computeProvider = workerStorage.computeUnitById[computeUnitId].owner;\\n        require(computeProvider != address(0x00), \\\"ComputeUnit not found\\\");\\n        require(computeProvider == msg.sender || msg.sender == owner(), \\\"Only provider or deal owner can remove worker\\\");\\n\\n        // change computeUnit count\\n        uint256 newComputeUnitCount = workerStorage.computeUnitCount;\\n        workerStorage.computeProviderInfo[computeProvider].computeUnitCount--;\\n        workerStorage.computeUnitCount = --newComputeUnitCount;\\n\\n        workerStorage.collateralWithdrawEpochByComputeUnitId[computeUnitId] = lastWorkedEpoch + _WITHDRAW_EPOCH_TIMEOUT;\\n\\n        // remove ComputeUnit\\n        workerStorage.computeUnitsIdsList.remove(computeUnitId);\\n\\n        emit ComputeUnitRemoved(computeUnitId);\\n\\n        return newComputeUnitCount;\\n    }\\n\\n    // ------------------ Public View Functions ---------------------\\n    function getComputeUnit(bytes32 id) public view returns (ComputeUnit memory) {\\n        return _getWorkerManagerStorage().computeUnitById[id];\\n    }\\n\\n    function getComputeUnitCount() public view returns (uint256) {\\n        return _getWorkerManagerStorage().computeUnitCount;\\n    }\\n\\n    function getComputeUnits() public view returns (ComputeUnit[] memory) {\\n        WorkerManagerStorage storage workerStorage = _getWorkerManagerStorage();\\n\\n        ComputeUnit[] memory computeUnits = new ComputeUnit[](workerStorage.computeUnitCount);\\n\\n        uint256 index = 0;\\n        bytes32 computeUnitId = workerStorage.computeUnitsIdsList.first();\\n        while (computeUnitId != bytes32(0)) {\\n            computeUnits[index] = workerStorage.computeUnitById[computeUnitId];\\n            index++;\\n\\n            computeUnitId = workerStorage.computeUnitsIdsList.next(computeUnitId);\\n        }\\n\\n        return computeUnits;\\n    }\\n\\n    function getUnlockCollateralEpoch(bytes32 computeUnitId) external view returns (uint256) {\\n        return _getWorkerManagerStorage().collateralWithdrawEpochByComputeUnitId[computeUnitId];\\n    }\\n\\n    // ------------------ Public Mutable Functions ---------------------\\n    function setWorker(bytes32 computeUnitId, bytes32 workerId) external {\\n        WorkerManagerStorage storage workerStorage = _getWorkerManagerStorage();\\n        ComputeUnit storage computeUnit = workerStorage.computeUnitById[computeUnitId];\\n\\n        require(workerId != bytes32(0), \\\"WorkerId can't be empty\\\");\\n\\n        computeUnit.workerId = workerId;\\n\\n        emit WorkerIdUpdated(computeUnitId, workerId);\\n    }\\n\\n    function withdrawCollateral(bytes32 computeUnitId) external {\\n        WorkerManagerStorage storage workerStorage = _getWorkerManagerStorage();\\n\\n        require(\\n            workerStorage.collateralWithdrawEpochByComputeUnitId[computeUnitId] <= _globalCore().currentEpoch(),\\n            \\\"Collateral not available\\\"\\n        );\\n\\n        // get collateral and compute provider\\n        uint256 amount = workerStorage.computeUnitById[computeUnitId].collateral;\\n        address computeProvider = workerStorage.computeUnitById[computeUnitId].owner;\\n\\n        // reset collateral withdraw info\\n        workerStorage.collateralWithdrawEpochByComputeUnitId[computeUnitId] = 0;\\n\\n        // transfer collateral\\n        fluenceToken().safeTransfer(computeProvider, amount);\\n\\n        delete workerStorage.computeUnitById[computeUnitId];\\n\\n        emit CollateralWithdrawn(computeProvider, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x562ce46876a525272201b0a43e2f0ab5737f2385f062b9f2c703c001a6c3db50\",\"license\":\"Apache-2.0\"},\"contracts/deal/base/Types.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nstruct CIDV1 {\\n    bytes4 prefixes;\\n    bytes32 hash;\\n}\\n\",\"keccak256\":\"0x9b0d5e06acd11ddf64e328e8303e29d1c30b4983b7684ab6121effd804c89e6e\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IConfig.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../base/Types.sol\\\";\\n\\ninterface IConfig {\\n    // ------------------ Types ------------------\\n    enum AccessType {\\n        NONE,\\n        WHITELIST,\\n        BLACKLIST\\n    }\\n\\n    // ------------------ Events ------------------\\n    event AppCIDChanged(CIDV1 newAppCID);\\n\\n    // ------------------ View Functions ---------------------\\n    // function globalCore() external view returns (address);\\n\\n    function paymentToken() external view returns (IERC20);\\n\\n    function fluenceToken() external view returns (IERC20);\\n\\n    function creationBlock() external view returns (uint256);\\n\\n    function pricePerWorkerEpoch() external view returns (uint256);\\n\\n    function targetWorkers() external view returns (uint256);\\n\\n    function collateralPerWorker() external view returns (uint256);\\n\\n    function minWorkers() external view returns (uint256);\\n\\n    function effectors() external view returns (CIDV1[] memory);\\n\\n    function accessType() external view returns (AccessType);\\n\\n    function isInAccessList(address addr) external view returns (bool);\\n\\n    function getAccessList() external view returns (address[] memory);\\n\\n    function appCID() external view returns (CIDV1 memory);\\n\\n    function maxWorkersPerProvider() external view returns (uint256);\\n\\n    // ------------------ Mutable Functions ------------------\\n    function setAppCID(CIDV1 calldata appCID_) external;\\n\\n    function changeAccessType(AccessType accessType_) external;\\n\\n    function removeFromAccessList(address addr) external;\\n}\\n\",\"keccak256\":\"0xea76738cda167fd3c570e8d500e0b55bd5f46058715a02cfa150c0f9e79acdf1\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IDeal.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IConfig.sol\\\";\\nimport \\\"./IWorkerManager.sol\\\";\\n\\ninterface IDeal is IConfig, IWorkerManager {\\n    // ------------------ Types ------------------\\n    enum Status {\\n        INACTIVE,\\n        ACTIVE,\\n        ENDED\\n    }\\n\\n    // ----------------- Events -----------------\\n    event Deposited(uint256 amount);\\n    event Withdrawn(uint256 amount);\\n\\n    event RewardWithdrawn(bytes32 computeUnitId, uint256 reward);\\n\\n    // ------------------ Init ------------------\\n    function initialize(\\n        CIDV1 calldata appCID_,\\n        IERC20 paymentToken_,\\n        uint256 collateralPerWorker_,\\n        uint256 minWorkers_,\\n        uint256 targetWorkers_,\\n        uint256 maxWorkersPerProvider_,\\n        uint256 pricePerWorkerEpoch_,\\n        CIDV1[] calldata effectors_,\\n        IConfig.AccessType accessType_,\\n        address[] calldata accessList_,\\n        address owner_\\n    ) external;\\n\\n    // ------------------ Public Ownable Functions ------------------\\n    function deposit(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    // ------------------ Public View Functions ------------------\\n    function getStatus() external view returns (Status);\\n\\n    function getFreeBalance() external view returns (uint256);\\n\\n    function getRewardAmount(bytes32 computeUnitId) external view returns (uint);\\n\\n    function getMaxPaidEpoch() external view returns (uint256);\\n\\n    // ------------------ Public Mutable Functions ------------------\\n    function withdrawRewards(bytes32 computeUnitId) external;\\n}\\n\",\"keccak256\":\"0x7ace86d834d204005297bbec6709a9a9e20c5a5f2492d9eb82bbe76766b366fb\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IWorkerManager.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../utils/LinkedListWithUniqueKeys.sol\\\";\\n\\ninterface IWorkerManager {\\n    // ------------------ Types ------------------\\n    struct ComputeUnit {\\n        bytes32 id;\\n        bytes32 peerId;\\n        bytes32 workerId;\\n        address owner;\\n        uint256 collateral;\\n        uint256 created;\\n    }\\n\\n    // ------------------ Events ------------------\\n    event ComputeUnitCreated(bytes32 id, address owner);\\n    event ComputeUnitRemoved(bytes32 id);\\n\\n    event WorkerIdUpdated(bytes32 computeUnitId, bytes32 workerId);\\n    event WorkerRemoved(bytes32 computeUnitId);\\n\\n    event CollateralWithdrawn(address owner, uint256 amount);\\n\\n    // ------------------ Public View Functions ---------------------\\n    function getComputeUnit(bytes32 id) external view returns (ComputeUnit memory);\\n\\n    function getComputeUnitCount() external view returns (uint256);\\n\\n    function getComputeUnits() external view returns (ComputeUnit[] memory);\\n\\n    function getUnlockCollateralEpoch(bytes32 computeUnitId) external view returns (uint256);\\n\\n    // ------------------ Public Mutable Functions ---------------------\\n    function createComputeUnit(address computeProvider, bytes32 peerId) external returns (bytes32);\\n\\n    function removeComputeUnit(bytes32 computeUnitId) external;\\n\\n    function setWorker(bytes32 computeUnitId, bytes32 workerId) external;\\n\\n    function withdrawCollateral(bytes32 computeUnitId) external;\\n}\\n\",\"keccak256\":\"0xc69963c408081863853d90639fe02ba71ab18a35a5090be92a6a683142507d80\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IDealFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../deal/base/Types.sol\\\";\\nimport \\\"../../deal/interfaces/IDeal.sol\\\";\\n\\ninterface IDealFactory {\\n    // ----------------- Events -----------------\\n    event DealCreated(address indexed owner, IDeal deal, uint createdAtEpoch);\\n\\n    // ----------------- View -----------------\\n    function hasDeal(IDeal deal) external view returns (bool);\\n\\n    // ----------------- Mutable -----------------\\n    function deployDeal(\\n        CIDV1 calldata appCID_,\\n        IERC20 paymentToken_,\\n        uint256 collateralPerWorker_,\\n        uint256 minWorkers_,\\n        uint256 targetWorkers_,\\n        uint256 maxWorkersPerProvider_,\\n        uint256 pricePerWorkerEpoch_,\\n        CIDV1[] calldata effectors_,\\n        IDeal.AccessType accessType_,\\n        address[] calldata accessList_\\n    ) external returns (IDeal);\\n}\\n\",\"keccak256\":\"0xa3243f85ee0f1f97551e3d70fc565373b7108a24602578ee7b5810397ab30b66\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IGlobalCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IDealFactory.sol\\\";\\nimport \\\"../matcher/interfaces/IMatcher.sol\\\";\\n\\npragma solidity ^0.8.19;\\n\\ninterface IGlobalCore {\\n    // ------------------ Events ------------------\\n    event MatcherSet(address matcher);\\n    event FactorySet(address factory);\\n\\n    // ------------------ Initializer ------------------\\n    function initialize(IERC20 fluenceToken_, uint256 epochDuration_) external;\\n\\n    // ------------------ external View Functions ------------------\\n    function currentEpoch() external view returns (uint256);\\n\\n    function epochDuration() external view returns (uint256);\\n\\n    function fluenceToken() external view returns (IERC20);\\n\\n    function matcher() external view returns (IMatcher);\\n\\n    function factory() external view returns (IDealFactory);\\n\\n    // ------------------ external Mutable Functions ------------------\\n    function setMatcher(IMatcher matcher_) external;\\n\\n    function setFactory(IDealFactory factory_) external;\\n}\\n\",\"keccak256\":\"0x3bcf6a0d5f47178b0b709533e3e43e34f5473860eccff2a43544ee6f0e1c75f8\",\"license\":\"Apache-2.0\"},\"contracts/global/matcher/interfaces/IMatcher.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../deal/base/Types.sol\\\";\\nimport \\\"../../../deal/interfaces/IDeal.sol\\\";\\n\\ninterface IMatcher {\\n    // ----------------- Events -----------------\\n    event ComputePeerMatched(bytes32 indexed peerId, IDeal deal, bytes32 computeUnitId, uint dealCreationBlock, CIDV1 appCID);\\n\\n    // ----------------- View -----------------\\n    // TODO: move this logic to offchain. Temp solution\\n    function findComputePeers(IDeal deal) external view returns (address[] memory computeProviders, bytes32[][] memory computePeers);\\n\\n    // ----------------- Mutables -----------------\\n    function matchDeal(IDeal deal, address[] calldata providers, bytes32[][] calldata peers) external;\\n}\\n\",\"keccak256\":\"0x4338004e25f5442ee1f75badfc7c489b1808d4b8eced2f9fee8288d8b4e2c0b1\",\"license\":\"Apache-2.0\"},\"contracts/utils/LinkedListWithUniqueKeys.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nlibrary LinkedListWithUniqueKeys {\\n    // ------------------ TYPES ------------------\\n    struct Element {\\n        bytes32 prev;\\n        bytes32 next;\\n    }\\n\\n    struct Bytes32List {\\n        bytes32 _first;\\n        bytes32 _last;\\n        uint256 _length;\\n        mapping(bytes32 => Element) _elements;\\n    }\\n\\n    // ------------------ PRIVATE ------------------\\n    function _has(Bytes32List storage self, Element memory element, bytes32 key) private view returns (bool) {\\n        return element.prev != bytes32(0x00) || element.next != bytes32(0x00) || key == self._first || key == self._last;\\n    }\\n\\n    // ------------------ VIEWS ------------------\\n\\n    function first(Bytes32List storage self) internal view returns (bytes32) {\\n        return self._first;\\n    }\\n\\n    function last(Bytes32List storage self) internal view returns (bytes32) {\\n        return self._last;\\n    }\\n\\n    function length(Bytes32List storage self) internal view returns (uint256) {\\n        return self._length;\\n    }\\n\\n    function has(Bytes32List storage self, bytes32 key) internal view returns (bool) {\\n        return _has(self, self._elements[key], key);\\n    }\\n\\n    function next(Bytes32List storage self, bytes32 key) internal view returns (bytes32) {\\n        return self._elements[key].next;\\n    }\\n\\n    function prev(Bytes32List storage self, bytes32 key) internal view returns (bytes32) {\\n        return self._elements[key].prev;\\n    }\\n\\n    function toArray(Bytes32List storage self) internal view returns (bytes32[] memory) {\\n        uint256 arrayLength = self._length;\\n        bytes32[] memory array = new bytes32[](arrayLength);\\n\\n        bytes32 current = self._first;\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            array[i] = current;\\n            current = self._elements[current].next;\\n        }\\n\\n        return array;\\n    }\\n\\n    // ------------------ MUTABLES ------------------\\n    function push(Bytes32List storage self, bytes32 key) internal {\\n        require(key != bytes32(0x00), \\\"Key cannot be ZERO\\\");\\n        require(!has(self, key), \\\"Key already exists\\\");\\n\\n        bytes32 oldLast = self._last;\\n\\n        self._length++;\\n\\n        if (oldLast == 0) {\\n            self._first = key;\\n            self._last = key;\\n            return;\\n        }\\n\\n        self._last = key;\\n        self._elements[key].prev = oldLast;\\n        self._elements[oldLast].next = key;\\n    }\\n\\n    function remove(Bytes32List storage self, bytes32 key) internal {\\n        Element memory element = self._elements[key];\\n\\n        require(_has(self, element, key), \\\"Key does not exist\\\");\\n\\n        if (element.prev == bytes32(0x00)) {\\n            self._first = element.next;\\n        }\\n\\n        if (element.next == bytes32(0x00)) {\\n            self._last = element.prev;\\n        }\\n\\n        if (element.prev != bytes32(0x00)) {\\n            self._elements[element.prev].next = element.next;\\n        }\\n\\n        if (element.next != bytes32(0x00)) {\\n            self._elements[element.next].prev = element.prev;\\n        }\\n\\n        delete self._elements[key];\\n\\n        self._length--;\\n    }\\n}\\n\",\"keccak256\":\"0xb76f0ffe2d1583afcf8743dc060ea05984200676f53101fc1c3f2a450bedcdd3\",\"license\":\"Apache-2.0\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract Ownable is Initializable {\\n    // ------------------ Storage ------------------\\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\\\"fluence.uitls.storage.v1.ownable\\\")) - 1);\\n\\n    struct OwnableStorage {\\n        address owner;\\n    }\\n\\n    OwnableStorage private _storage;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage s) {\\n        bytes32 storageSlot = _STORAGE_SLOT;\\n        assembly {\\n            s.slot := storageSlot\\n        }\\n    }\\n\\n    // ------------------ Other ------------------\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _getOwnableStorage().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != msg.sender) {\\n            revert OwnableUnauthorizedAccount(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage ownableStorage = _getOwnableStorage();\\n\\n        address oldOwner = ownableStorage.owner;\\n        ownableStorage.owner = newOwner;\\n\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x510f308a57e80df7ff484ce54b6210730e90c010bdee7c5f0e7d7baf22c34f76\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60c060409080825234620001e15780620043e78038038091620000238285620001e6565b8339602092839181010312620001e157516001600160a01b039081811690818103620001e15760a052835163ac027f9760e01b8152908390829060049082905afa908115620001d65760009162000192575b5090506080526000549060ff8260081c166200013f5760ff8083160362000105575b82516141c6908162000221823960805181818161063a01528181610b8a0152610efc015260a05181818161039301528181610ae601528181610d04015281816112a401528181611f53015281816121d40152818161267a01528181612a680152818161303901526131800152f35b60ff7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989281191617600055825160ff8152a1388062000097565b60849083519062461bcd60e51b82526004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152fd5b8381813d8311620001ce575b620001aa8183620001e6565b81010312620001ca57519182168203620001c75750803862000075565b80fd5b5080fd5b503d6200019e565b84513d6000823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200020a57604052565b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c908163055236f414612beb5750806307da68f514612a04578063108d2f52146129c757806314d3b7671461280057806317634514146127c3578063176474cf146127a25780631af57b96146125f75780632943dcab146125ba5780632b9f5b321461256f5780632db31193146125325780632e1a7d4d146121715780633013ce291461211e5780633591187c14611eff578063378b22e414611ec257806344228b12146118e45780634b66a309146116ca5780634e69d560146116a25780636cd1344814611665578063715018a6146115c5578063745e920b146114cd5780637878e81b1461149f5780637dfb66261461121f5780638a0c725b146111e25780638d5ddbb31461102b5780638da5cb5b14610fd85780639bc6686814610f20578063ac027f9714610ecf578063b55ec18a14610e86578063b6b55f2514610ca2578063cffe224414610c81578063d3cde34414610a5e578063d5053ab014610997578063e93c4f1514610974578063edd0d73414610937578063eebe998f1461032f578063f2fde38b146103045763fc1e5e2a146101b657600080fd5b346102ff5760006003193601126102ff577f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0d80546101f381612dd9565b6102006040519182612d98565b81815260209182820180946000527fcfcab6f3bf9ee9c2484fd18eeb2a9bd794cfdeb4ec98cce66c941e6633f8e0956000915b8383106102ae5760408051878152865181890181905289928201908960005b82811061025f5784840385f35b9091928260408261029f6001948a51602080917fffffffff0000000000000000000000000000000000000000000000000000000081511684520151910152565b01960191019492919094610252565b6002866001926040516102c081612d60565b7fffffffff00000000000000000000000000000000000000000000000000000000865460e01b1681528486015483820152815201920192019190610233565b600080fd5b346102ff5760206003193601126102ff5761032d610320612cf7565b610328614120565b61405d565b005b346102ff5760406003193601126102ff57610348612cf7565b602435604051917f7667180800000000000000000000000000000000000000000000000000000000835260209273ffffffffffffffffffffffffffffffffffffffff918482600481867f0000000000000000000000000000000000000000000000000000000000000000165afa91821561092b576000926108fc575b507fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d20928354947f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0a548610156108b85760405191878301967f0e21d2e2d5be9ded2ebc4e15f49071921d3423c94178bed2c85195b579511f7088527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008286169560601b16604085015282605485015260548452608084019784891067ffffffffffffffff8a111761088957886040528451902097886000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2294858b528360036040600020015416610848575050846000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d21808a526040600020547f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0b548110156107de57877f865afb485bc19debe6b3005a955507b9380643890b997437eac163d3345167ba958b6040966105778f9a969761065e9c98610566600598612df1565b908a6000528d528a60002055612df1565b809d557f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0854998a938951976105ab89612d7c565b8489528289019182528a8901926000845260608a01958b875260808b0197885260a08b01988952600052528960002097518855516001880155516002870155600386019151167fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790555160048401555191015561062b88613f64565b81519088825289820152a130337f00000000000000000000000000000000000000000000000000000000000000006133bb565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c5491836000527fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f385526040600020927fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1928354936106db613878565b927fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f254947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101968188116107af5761073c8360019960a09984898b6132c9565b847f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d095483101591826107a5575b505061078c575b50505061077d818361370d565b84550151910155604051908152f35b61079b916060860151856136c1565b9055878080610770565b119050848c610769565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60848b6040519062461bcd60e51b82526004820152602860248201527f4d617820776f726b6572732070657220636f6d707574652070726f766964657260448201527f20726561636865640000000000000000000000000000000000000000000000006064820152fd5b907f496420616c72656164792075736564000000000000000000000000000000000060c46064938d62461bcd60e51b85526084820152600f60a48201520152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6064876040519062461bcd60e51b82526004820152601660248201527f54617267657420776f726b6572732072656163686564000000000000000000006044820152fd5b9091508481813d8311610924575b6109148183612d98565b810103126102ff575190856103c4565b503d61090a565b6040513d6000823e3d90fd5b346102ff5760006003193601126102ff5760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0854604051908152f35b346102ff5760006003193601126102ff57602061098f61313d565b604051908152f35b346102ff5760406003193601126102ff5760043560243590806000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d226020526040600020908215610a1a57827fcf79e0e27c8c35d39bd9b727f35e6f79573597f660c88baf483fc1511c49203c936002604094015582519182526020820152a1005b606460405162461bcd60e51b815260206004820152601760248201527f576f726b657249642063616e277420626520656d7074790000000000000000006044820152fd5b346102ff576020806003193601126102ff57600435806000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d27808352604060002054916040517f7667180800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938582600481887f0000000000000000000000000000000000000000000000000000000000000000165afa91821561092b57600092610c52575b5011610c0e577fc30fcfbcaac9e0deffa719714eaa82396ff506a0d0d0eebe170830177288715d93816000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2291828252604060002094600360048701549601541693825260006040812055610bae85857f00000000000000000000000000000000000000000000000000000000000000006137df565b6000525260006005604082208281558260018201558260028201558260038201558260048201550155610c09604051928392836020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0390a1005b6064846040519062461bcd60e51b82526004820152601860248201527f436f6c6c61746572616c206e6f7420617661696c61626c6500000000000000006044820152fd5b9091508581813d8311610c7a575b610c6a8183612d98565b810103126102ff57519086610b17565b503d610c60565b346102ff5760406003193601126102ff57602061098f602435600435613941565b346102ff576020806003193601126102ff5760043590610cc0614120565b604051917f7667180800000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8284600481847f0000000000000000000000000000000000000000000000000000000000000000165afa93841561092b57600094610e57575b5081610e4e91610e227f2a89b2e3d580398d6dc2db5e0f336b52602bbaa51afa9bb5cdf59239cf0d2bea967fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d20547f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c54610e1b610daf613878565b927fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f192610e03818386547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f254908a8a6132c9565b60608501610e128a82516132bc565b809152866136c1565b905561370d565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d075416309033906133bb565b604051908152a1005b93508284813d8311610e7f575b610e6e8183612d98565b810103126102ff5792519281610d35565b503d610e64565b346102ff5760006003193601126102ff57602060ff7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0e541660405190610ecb81612d1a565b8152f35b346102ff5760006003193601126102ff57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346102ff5760006003193601126102ff5760006020604051610f4181612d60565b828152015260408051610f5381612d60565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d055460e01b7fffffffff00000000000000000000000000000000000000000000000000000000168082527f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0654602092830190815283519182525191810191909152f35bf35b346102ff5760006003193601126102ff57602073ffffffffffffffffffffffffffffffffffffffff7f612e56b0fc389e6dab6fa70e140af078f831069f9c4d9558e645bdefbbc811235416604051908152f35b346102ff5760006003193601126102ff577f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d115461106781612dd9565b906110756040519283612d98565b8082527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090816110a482612dd9565b019060209136838601377f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0f546000905b828210611198575050508251906111036110ed83612dd9565b926110fb6040519485612d98565b808452612dd9565b828201930136843760005b845181101561113e57806111256111399287612e1e565b5160601c6111338286612e1e565b52612df1565b61110e565b50925090604051928392818401908285525180915260408401929160005b82811061116b57505050500390f35b835173ffffffffffffffffffffffffffffffffffffffff168552869550938101939281019260010161115c565b806111a38388612e1e565b526000527f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d1283526111dc60016040600020015491612df1565b906110d4565b346102ff5760006003193601126102ff5760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0b54604051908152f35b346102ff576020806003193601126102ff57600435806000527fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f3825260406000206040517f7667180800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff908481600481857f0000000000000000000000000000000000000000000000000000000000000000165afa90811561092b57600091611472575b507fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d20547f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c5461137381611326613878565b937fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f2549087876132c9565b60a0820151906113a6611387875486612d53565b916113a1600189019361139b855487612d53565b90612d53565b61312a565b95861561142e57956040956113f98683968c96611423968d9a7f9b5336625f529f36cb0543297bdf5075b7f6b830bb892ff97c09fbfeae6255d59d5555608081016113f2868251612d53565b905261370d565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d07541633906137df565b8351928352820152a1005b6064896040519062461bcd60e51b82526004820152600a60248201527f4e6f2072657761726473000000000000000000000000000000000000000000006044820152fd5b90508481813d8311611498575b6114898183612d98565b810103126102ff5751856112d5565b503d61147f565b346102ff5760206003193601126102ff5760043560038110156102ff5761032d906114c8614120565b612f04565b346102ff5760206003193601126102ff576114e6613846565b506004356000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2260205260c0604060002060056040519161152783612d7c565b80548352600181015460208401526002810154604084015273ffffffffffffffffffffffffffffffffffffffff600382015416606084015260048101546080840152015460a0820152610fd6604051809260a0809180518452602081015160208501526040810151604085015273ffffffffffffffffffffffffffffffffffffffff6060820151166060850152608081015160808501520151910152565b346102ff5760006003193601126102ff576115de614120565b600073ffffffffffffffffffffffffffffffffffffffff7f612e56b0fc389e6dab6fa70e140af078f831069f9c4d9558e645bdefbbc811238054907fffffffffffffffffffffffff000000000000000000000000000000000000000082169055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346102ff5760006003193601126102ff5760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c54604051908152f35b346102ff5760006003193601126102ff5760206116bd612fcd565b60405190610ecb81612d1a565b346102ff5760006003193601126102ff577fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d20547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061172a6110ed83612dd9565b0160005b8181106118cd578260007fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d235490815b6117f45760408051602080825285518183018190528187019383019160005b8281106117895784840385f35b9091928260c0826117e56001948a5160a0809180518452602081015160208501526040810151604085015273ffffffffffffffffffffffffffffffffffffffff6060820151166060850152608081015160808501520151910152565b0196019101949291909461177c565b816000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2660207fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2281526118ba60406000209360405161185381612d7c565b85548152600560019687810154868401526002810154604084015273ffffffffffffffffffffffffffffffffffffffff600382015416606084015260048101546080840152015460a08201526118a98289612e1e565b526118b48188612e1e565b50612df1565b936000525260406000200154908161175d565b6020906118d8613846565b8282860101520161172e565b346102ff57600319360161018081126102ff576040136102ff5760443573ffffffffffffffffffffffffffffffffffffffff811681036102ff5767ffffffffffffffff8061010435116102ff57366023610104350112156102ff57806101043560040135116102ff57366024610104356004013560061b610104350101116102ff5760036101243510156102ff578061014435116102ff57366023610144350112156102ff576101443560040135116102ff57366024610144356004013560051b610144350101116102ff5773ffffffffffffffffffffffffffffffffffffffff610164351661016435036102ff576000549060ff8260081c161591828093611eb5575b8015611e9e575b15611e34578260017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00831617600055611e05575b50611a3e60ff60005460081c16611a3981612f5c565b612f5c565b611a4a6101643561405d565b611a5b60ff60005460081c16612f5c565b437f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d045573ffffffffffffffffffffffffffffffffffffffff7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0791167fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790556064357f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d08556084357f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d095560a4357f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0a5560c4357f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0b5560e4357f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c5560005b61010435600401358110611c8f5750611bb461012435612f04565b60005b61014435600401358110611c295750611bce612e32565b611bd457005b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b60248160051b610144350101359073ffffffffffffffffffffffffffffffffffffffff821682036102ff57611c857fffffffffffffffffffffffffffffffffffffffff000000000000000000000000611c8a9360601b16613de3565b612df1565b611bb7565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0d54680100000000000000008110156108895760018101807f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0d55811015611dd6577f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0d60005260011b90817fcfcab6f3bf9ee9c2484fd18eeb2a9bd794cfdeb4ec98cce66c941e6633f8e09501918160061b61010435019260248401357fffffffff00000000000000000000000000000000000000000000000000000000811681036102ff57611dd1947fcfcab6f3bf9ee9c2484fd18eeb2a9bd794cfdeb4ec98cce66c941e6633f8e0969260449260e01c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000008254161790550135910155612df1565b611b99565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011760005582611a23565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156119ef5750600160ff8216146119ef565b50600160ff8216106119e8565b346102ff5760006003193601126102ff5760207fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f154604051908152f35b346102ff5760206003193601126102ff576040517f7667180800000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561092b576000916120ed575b507fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f45460ff16156120e457611fdd7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f5545b600435613941565b907f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f19283549361202d613878565b927fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f2549260018101938482116107af5787612071848997889461032d9c868c6132c9565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d09548310918291826120da575b5050156120ae575050505561370d565b9091929350156120c1575b50505061370d565b6120d0916060850151866136c1565b90558380806120b9565b119050858a61209e565b611fdd81611fd5565b90506020813d8211612116575b8161210760209383612d98565b810103126102ff575181611f84565b3d91506120fa565b346102ff5760006003193601126102ff57602073ffffffffffffffffffffffffffffffffffffffff7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d075416604051908152f35b346102ff576020806003193601126102ff576004359061218f614120565b604051917f7667180800000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff928281600481877f0000000000000000000000000000000000000000000000000000000000000000165afa90811561092b57600091612505575b507fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d20547f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f45460ff16156123925750507fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f55490600282018092116107af57111561232857610e4e817f430648de173157e069201c943adb2d4e340e7cf5b27b1b09c9cb852f03d63b56947fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4ee6122fc838254612d53565b90557f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d07541633906137df565b6084826040519062461bcd60e51b82526004820152602d60248201527f43616e2774207769746864726177206265666f726520322065706f636873206160448201527f66746572206465616c20656e64000000000000000000000000000000000000006064820152fd5b61239a613878565b917fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1916123ee818385547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f2549089896132c9565b606084016123fd878251612d53565b81527f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821682036107af576124567f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0a548360011b61312a565b81511061249b57937f430648de173157e069201c943adb2d4e340e7cf5b27b1b09c9cb852f03d63b569893610e1b61249694610e4e98948a9851866136c1565b6113f9565b6084886040519062461bcd60e51b82526004820152602c60248201527f467265652062616c616e6365206e6565647320746f20636f766572206d696e6960448201527f6d756d20322065706f63687300000000000000000000000000000000000000006064820152fd5b90508281813d831161252b575b61251c8183612d98565b810103126102ff575184612205565b503d612512565b346102ff5760006003193601126102ff5760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0954604051908152f35b346102ff5760206003193601126102ff576004356000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d276020526020604060002054604051908152f35b346102ff5760006003193601126102ff5760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0a54604051908152f35b346102ff576020806003193601126102ff576004356000527fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f381526040600020604051907f76671808000000000000000000000000000000000000000000000000000000008252828260048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa91821561092b57600092612771575b50906113a161098f9261139b7fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d205491600160a06127657f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c549761275d89612710613878565b987fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f25490858c6132c9565b845490612d53565b94015191015490612d53565b91508282813d831161279b575b6127888183612d98565b810103126102ff579051906113a16126ab565b503d61277e565b346102ff5760406003193601126102ff576127bb614120565b61032d612e32565b346102ff5760006003193601126102ff5760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0454604051908152f35b346102ff576020806003193601126102ff577fffffffffffffffffffffffffffffffffffffffff00000000000000000000000061283b612cf7565b612843614120565b60601b1690816000527f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d1291828252604060002060016040519161288583612d60565b80548352015483820190815261289b8383613ce3565b156129835781518015908161295a575b8251918215612932575b1561291c575b5050519081612907575b505060005252600060016040822082815501557f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d116129038154613916565b9055005b519060005283835260406000205583806128c5565b60005285855260016040600020015585806128bb565b817f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d10556128b5565b82517f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0f556128ab565b6064846040519062461bcd60e51b82526004820152601260248201527f4b657920646f6573206e6f7420657869737400000000000000000000000000006044820152fd5b346102ff5760006003193601126102ff5760207fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2054604051908152f35b346102ff5760006003193601126102ff57612a1d614120565b612a25613878565b6040517f7667180800000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561092b57600091612bba575b508091817fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f191612b3d82845492612b387fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f2547fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d20547f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c54918786866132c9565b61370d565b11612bb2575b507fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f555005b558082612b43565b90506020813d8211612be3575b81612bd460209383612d98565b810103126102ff575182612a99565b3d9150612bc7565b346102ff5760206003193601126102ff57602080917fffffffffffffffffffffffffffffffffffffffff000000000000000000000000612c29612cf7565b60601b1690816000527f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d128352604060002090612c6481612d60565b6001825492838352015493849101521591821592612ced575b508115612cc2575b8115612c97575b506040519015158152f35b90507f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d10541482612c8c565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0f5481149150612c85565b1515915083612c7d565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036102ff57565b60031115612d2457565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b919082039182116107af57565b6040810190811067ffffffffffffffff82111761088957604052565b60c0810190811067ffffffffffffffff82111761088957604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761088957604052565b67ffffffffffffffff81116108895760051b60200190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107af5760010190565b8051821015611dd65760209160051b010190565b6004357fffffffff000000000000000000000000000000000000000000000000000000008116908181036102ff577fc820a66d3bdd50a45cf12cda6dc8ec9e94fb5123edd7da736eea18316f8523a0916040917f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d059060e01c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000825416179055602435807f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d065582519182526020820152a1565b612f0d81612d1a565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0e9060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008354169116179055565b15612f6357565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b60ff7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f45416613125576040517f7667180800000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561092b576000916130f1575b507fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f154907fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d20547f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0954116000146130e1575050600090565b11156130ec57600090565b600190565b906020823d821161311d575b8161310a60209383612d98565b8101031261311a5750513861306a565b80fd5b3d91506130fd565b600290565b818102929181159184041417156107af57565b6040517f7667180800000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561092b5760009161328b575b507fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1548111613285576132829061139b61325a6132327fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4ee54937fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f25490612d53565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c549061312a565b7fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d20549061312a565b90565b50600090565b906020823d82116132b4575b816132a460209383612d98565b8101031261311a575051386131b1565b3d9150613297565b919082018092116107af57565b91939092948484118080916133b2575b156133325750916132fb60a0926113a1613327956113a1899a61332d9a612d53565b6060820161330a828251612d53565b905261331b608083019182516132bc565b90520193845192612d53565b906132bc565b90525b565b8091939695816133a7575b501561335a5750505061332760a061332d93940193845192612d53565b9291921561336a575b5050505050565b6113a16080936113a161339b9661338095612d53565b9260608101613390858251612d53565b9052019182516132bc565b90523880808080613363565b90508510153861333d565b508686116132d9565b9290604051927f23b872dd00000000000000000000000000000000000000000000000000000000602085015273ffffffffffffffffffffffffffffffffffffffff809216602485015216604483015260648201526064815260a081019181831067ffffffffffffffff84111761088957613330926040525b73ffffffffffffffffffffffffffffffffffffffff169060405161345681612d60565b6020928382527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564848301526000808486829651910182855af13d156135c9573d9167ffffffffffffffff831161359c57906134ef939291604051926134e2887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160185612d98565b83523d868885013e6135d3565b805191821591848315613574575b50505090501561350a5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b9193818094500103126135985782015190811515820361311a5750803880846134fd565b5080fd5b6024857f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b906134ef92916060915b9192901561363457508151156135e7575090565b3b156135f05790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156136475750805190602001fd5b6040519062461bcd60e51b825281602080600483015282519283602484015260005b8481106136aa575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201613669565b91926136cd919361312a565b80156136de576132829204906132bc565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b805160608201518091036137b7575b506020810151608082015180910361378f575b5060a06040820151910151809103613767575b507fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f255565b7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f05538613742565b7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4ef553861372f565b7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4ee553861371c565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff92909216602483015260448083019390935291815261333091613841606483612d98565b613433565b6040519061385382612d7c565b8160a06000918281528260208201528260408201528260608201528260808201520152565b613880613846565b507fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4ee547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4ef547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f05490604051926138f584612d7c565b8084528160208501528260408501526060840152608083015260a082015290565b80156107af577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b91906000928084526020907fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d22825273ffffffffffffffffffffffffffffffffffffffff92604090846003838920015416948515613ca057338614908115613c73575b5015613c0a57613a0a7fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d209586549089527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d218652838920613a038154613916565b9055613916565b80955560028101809111613bdd578287527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d278452818720557fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2695868452818120966001835198613a798a612d60565b80548a52015497858101988952613a908582613d63565b15613b9a577f319861d91651b1d776940afecf33ec848245a2b1fb1854613bbe2a367b54f792969798815180159081613b71575b8251918215613b49575b15613b36575b5050519081613b24575b50508382528452600182822082815501557fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d25613b1a8154613916565b905551908152a190565b51908352818652838320553880613ade565b8552838852600186862001553880613ad4565b817fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2455613ace565b82517fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2355613ac4565b60648685519062461bcd60e51b82526004820152601260248201527f4b657920646f6573206e6f7420657869737400000000000000000000000000006044820152fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b60848483519062461bcd60e51b82526004820152602d60248201527f4f6e6c792070726f7669646572206f72206465616c206f776e65722063616e2060448201527f72656d6f766520776f726b6572000000000000000000000000000000000000006064820152fd5b90507f612e56b0fc389e6dab6fa70e140af078f831069f9c4d9558e645bdefbbc8112354163314386139a3565b60648584519062461bcd60e51b82526004820152601560248201527f436f6d70757465556e6974206e6f7420666f756e6400000000000000000000006044820152fd5b9081511591821592613d55575b508115613d2a575b8115613d02575090565b90507f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d10541490565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0f5481149150613cf8565b602001511515915038613cf0565b9081511591821592613dd5575b508115613daa575b8115613d82575090565b90507fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d24541490565b7fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d235481149150613d78565b602001511515915038613d70565b8015613f205760008181527f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d129081602052613e3b8360408320600160405191613e2b83612d60565b8054835201546020820152613ce3565b613edc577f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d10918254907f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d11613e8f8154612df1565b9055848215613eb4579060409392916001955585835260205280838320558152200155565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0f5550505055565b606460405162461bcd60e51b815260206004820152601260248201527f4b657920616c72656164792065786973747300000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601260248201527f4b65792063616e6e6f74206265205a45524f00000000000000000000000000006044820152fd5b8015613f205760008181527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d269081602052613fbc8360408320600160405191613fac83612d60565b8054835201546020820152613d63565b613edc577fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d24918254907fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d256140108154612df1565b9055848215614035579060409392916001955585835260205280838320558152200155565b7fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d235550505055565b73ffffffffffffffffffffffffffffffffffffffff8091169081156140ef577f612e56b0fc389e6dab6fa70e140af078f831069f9c4d9558e645bdefbbc81123805490837fffffffffffffffffffffffff00000000000000000000000000000000000000008316179055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b60246040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152fd5b73ffffffffffffffffffffffffffffffffffffffff7f612e56b0fc389e6dab6fa70e140af078f831069f9c4d9558e645bdefbbc811235416330361416057565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fdfea2646970667358221220a314e767c6ba4fcdec33a5dabaa71f02e8763f122afb394b663a9316686247c264736f6c63430008130033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c908163055236f414612beb5750806307da68f514612a04578063108d2f52146129c757806314d3b7671461280057806317634514146127c3578063176474cf146127a25780631af57b96146125f75780632943dcab146125ba5780632b9f5b321461256f5780632db31193146125325780632e1a7d4d146121715780633013ce291461211e5780633591187c14611eff578063378b22e414611ec257806344228b12146118e45780634b66a309146116ca5780634e69d560146116a25780636cd1344814611665578063715018a6146115c5578063745e920b146114cd5780637878e81b1461149f5780637dfb66261461121f5780638a0c725b146111e25780638d5ddbb31461102b5780638da5cb5b14610fd85780639bc6686814610f20578063ac027f9714610ecf578063b55ec18a14610e86578063b6b55f2514610ca2578063cffe224414610c81578063d3cde34414610a5e578063d5053ab014610997578063e93c4f1514610974578063edd0d73414610937578063eebe998f1461032f578063f2fde38b146103045763fc1e5e2a146101b657600080fd5b346102ff5760006003193601126102ff577f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0d80546101f381612dd9565b6102006040519182612d98565b81815260209182820180946000527fcfcab6f3bf9ee9c2484fd18eeb2a9bd794cfdeb4ec98cce66c941e6633f8e0956000915b8383106102ae5760408051878152865181890181905289928201908960005b82811061025f5784840385f35b9091928260408261029f6001948a51602080917fffffffff0000000000000000000000000000000000000000000000000000000081511684520151910152565b01960191019492919094610252565b6002866001926040516102c081612d60565b7fffffffff00000000000000000000000000000000000000000000000000000000865460e01b1681528486015483820152815201920192019190610233565b600080fd5b346102ff5760206003193601126102ff5761032d610320612cf7565b610328614120565b61405d565b005b346102ff5760406003193601126102ff57610348612cf7565b602435604051917f7667180800000000000000000000000000000000000000000000000000000000835260209273ffffffffffffffffffffffffffffffffffffffff918482600481867f0000000000000000000000000000000000000000000000000000000000000000165afa91821561092b576000926108fc575b507fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d20928354947f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0a548610156108b85760405191878301967f0e21d2e2d5be9ded2ebc4e15f49071921d3423c94178bed2c85195b579511f7088527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008286169560601b16604085015282605485015260548452608084019784891067ffffffffffffffff8a111761088957886040528451902097886000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2294858b528360036040600020015416610848575050846000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d21808a526040600020547f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0b548110156107de57877f865afb485bc19debe6b3005a955507b9380643890b997437eac163d3345167ba958b6040966105778f9a969761065e9c98610566600598612df1565b908a6000528d528a60002055612df1565b809d557f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0854998a938951976105ab89612d7c565b8489528289019182528a8901926000845260608a01958b875260808b0197885260a08b01988952600052528960002097518855516001880155516002870155600386019151167fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790555160048401555191015561062b88613f64565b81519088825289820152a130337f00000000000000000000000000000000000000000000000000000000000000006133bb565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c5491836000527fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f385526040600020927fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1928354936106db613878565b927fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f254947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101968188116107af5761073c8360019960a09984898b6132c9565b847f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d095483101591826107a5575b505061078c575b50505061077d818361370d565b84550151910155604051908152f35b61079b916060860151856136c1565b9055878080610770565b119050848c610769565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60848b6040519062461bcd60e51b82526004820152602860248201527f4d617820776f726b6572732070657220636f6d707574652070726f766964657260448201527f20726561636865640000000000000000000000000000000000000000000000006064820152fd5b907f496420616c72656164792075736564000000000000000000000000000000000060c46064938d62461bcd60e51b85526084820152600f60a48201520152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6064876040519062461bcd60e51b82526004820152601660248201527f54617267657420776f726b6572732072656163686564000000000000000000006044820152fd5b9091508481813d8311610924575b6109148183612d98565b810103126102ff575190856103c4565b503d61090a565b6040513d6000823e3d90fd5b346102ff5760006003193601126102ff5760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0854604051908152f35b346102ff5760006003193601126102ff57602061098f61313d565b604051908152f35b346102ff5760406003193601126102ff5760043560243590806000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d226020526040600020908215610a1a57827fcf79e0e27c8c35d39bd9b727f35e6f79573597f660c88baf483fc1511c49203c936002604094015582519182526020820152a1005b606460405162461bcd60e51b815260206004820152601760248201527f576f726b657249642063616e277420626520656d7074790000000000000000006044820152fd5b346102ff576020806003193601126102ff57600435806000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d27808352604060002054916040517f7667180800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938582600481887f0000000000000000000000000000000000000000000000000000000000000000165afa91821561092b57600092610c52575b5011610c0e577fc30fcfbcaac9e0deffa719714eaa82396ff506a0d0d0eebe170830177288715d93816000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2291828252604060002094600360048701549601541693825260006040812055610bae85857f00000000000000000000000000000000000000000000000000000000000000006137df565b6000525260006005604082208281558260018201558260028201558260038201558260048201550155610c09604051928392836020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0390a1005b6064846040519062461bcd60e51b82526004820152601860248201527f436f6c6c61746572616c206e6f7420617661696c61626c6500000000000000006044820152fd5b9091508581813d8311610c7a575b610c6a8183612d98565b810103126102ff57519086610b17565b503d610c60565b346102ff5760406003193601126102ff57602061098f602435600435613941565b346102ff576020806003193601126102ff5760043590610cc0614120565b604051917f7667180800000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8284600481847f0000000000000000000000000000000000000000000000000000000000000000165afa93841561092b57600094610e57575b5081610e4e91610e227f2a89b2e3d580398d6dc2db5e0f336b52602bbaa51afa9bb5cdf59239cf0d2bea967fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d20547f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c54610e1b610daf613878565b927fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f192610e03818386547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f254908a8a6132c9565b60608501610e128a82516132bc565b809152866136c1565b905561370d565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d075416309033906133bb565b604051908152a1005b93508284813d8311610e7f575b610e6e8183612d98565b810103126102ff5792519281610d35565b503d610e64565b346102ff5760006003193601126102ff57602060ff7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0e541660405190610ecb81612d1a565b8152f35b346102ff5760006003193601126102ff57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346102ff5760006003193601126102ff5760006020604051610f4181612d60565b828152015260408051610f5381612d60565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d055460e01b7fffffffff00000000000000000000000000000000000000000000000000000000168082527f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0654602092830190815283519182525191810191909152f35bf35b346102ff5760006003193601126102ff57602073ffffffffffffffffffffffffffffffffffffffff7f612e56b0fc389e6dab6fa70e140af078f831069f9c4d9558e645bdefbbc811235416604051908152f35b346102ff5760006003193601126102ff577f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d115461106781612dd9565b906110756040519283612d98565b8082527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090816110a482612dd9565b019060209136838601377f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0f546000905b828210611198575050508251906111036110ed83612dd9565b926110fb6040519485612d98565b808452612dd9565b828201930136843760005b845181101561113e57806111256111399287612e1e565b5160601c6111338286612e1e565b52612df1565b61110e565b50925090604051928392818401908285525180915260408401929160005b82811061116b57505050500390f35b835173ffffffffffffffffffffffffffffffffffffffff168552869550938101939281019260010161115c565b806111a38388612e1e565b526000527f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d1283526111dc60016040600020015491612df1565b906110d4565b346102ff5760006003193601126102ff5760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0b54604051908152f35b346102ff576020806003193601126102ff57600435806000527fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f3825260406000206040517f7667180800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff908481600481857f0000000000000000000000000000000000000000000000000000000000000000165afa90811561092b57600091611472575b507fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d20547f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c5461137381611326613878565b937fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f2549087876132c9565b60a0820151906113a6611387875486612d53565b916113a1600189019361139b855487612d53565b90612d53565b61312a565b95861561142e57956040956113f98683968c96611423968d9a7f9b5336625f529f36cb0543297bdf5075b7f6b830bb892ff97c09fbfeae6255d59d5555608081016113f2868251612d53565b905261370d565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d07541633906137df565b8351928352820152a1005b6064896040519062461bcd60e51b82526004820152600a60248201527f4e6f2072657761726473000000000000000000000000000000000000000000006044820152fd5b90508481813d8311611498575b6114898183612d98565b810103126102ff5751856112d5565b503d61147f565b346102ff5760206003193601126102ff5760043560038110156102ff5761032d906114c8614120565b612f04565b346102ff5760206003193601126102ff576114e6613846565b506004356000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2260205260c0604060002060056040519161152783612d7c565b80548352600181015460208401526002810154604084015273ffffffffffffffffffffffffffffffffffffffff600382015416606084015260048101546080840152015460a0820152610fd6604051809260a0809180518452602081015160208501526040810151604085015273ffffffffffffffffffffffffffffffffffffffff6060820151166060850152608081015160808501520151910152565b346102ff5760006003193601126102ff576115de614120565b600073ffffffffffffffffffffffffffffffffffffffff7f612e56b0fc389e6dab6fa70e140af078f831069f9c4d9558e645bdefbbc811238054907fffffffffffffffffffffffff000000000000000000000000000000000000000082169055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346102ff5760006003193601126102ff5760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c54604051908152f35b346102ff5760006003193601126102ff5760206116bd612fcd565b60405190610ecb81612d1a565b346102ff5760006003193601126102ff577fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d20547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061172a6110ed83612dd9565b0160005b8181106118cd578260007fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d235490815b6117f45760408051602080825285518183018190528187019383019160005b8281106117895784840385f35b9091928260c0826117e56001948a5160a0809180518452602081015160208501526040810151604085015273ffffffffffffffffffffffffffffffffffffffff6060820151166060850152608081015160808501520151910152565b0196019101949291909461177c565b816000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2660207fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2281526118ba60406000209360405161185381612d7c565b85548152600560019687810154868401526002810154604084015273ffffffffffffffffffffffffffffffffffffffff600382015416606084015260048101546080840152015460a08201526118a98289612e1e565b526118b48188612e1e565b50612df1565b936000525260406000200154908161175d565b6020906118d8613846565b8282860101520161172e565b346102ff57600319360161018081126102ff576040136102ff5760443573ffffffffffffffffffffffffffffffffffffffff811681036102ff5767ffffffffffffffff8061010435116102ff57366023610104350112156102ff57806101043560040135116102ff57366024610104356004013560061b610104350101116102ff5760036101243510156102ff578061014435116102ff57366023610144350112156102ff576101443560040135116102ff57366024610144356004013560051b610144350101116102ff5773ffffffffffffffffffffffffffffffffffffffff610164351661016435036102ff576000549060ff8260081c161591828093611eb5575b8015611e9e575b15611e34578260017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00831617600055611e05575b50611a3e60ff60005460081c16611a3981612f5c565b612f5c565b611a4a6101643561405d565b611a5b60ff60005460081c16612f5c565b437f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d045573ffffffffffffffffffffffffffffffffffffffff7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0791167fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790556064357f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d08556084357f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d095560a4357f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0a5560c4357f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0b5560e4357f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c5560005b61010435600401358110611c8f5750611bb461012435612f04565b60005b61014435600401358110611c295750611bce612e32565b611bd457005b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b60248160051b610144350101359073ffffffffffffffffffffffffffffffffffffffff821682036102ff57611c857fffffffffffffffffffffffffffffffffffffffff000000000000000000000000611c8a9360601b16613de3565b612df1565b611bb7565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0d54680100000000000000008110156108895760018101807f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0d55811015611dd6577f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0d60005260011b90817fcfcab6f3bf9ee9c2484fd18eeb2a9bd794cfdeb4ec98cce66c941e6633f8e09501918160061b61010435019260248401357fffffffff00000000000000000000000000000000000000000000000000000000811681036102ff57611dd1947fcfcab6f3bf9ee9c2484fd18eeb2a9bd794cfdeb4ec98cce66c941e6633f8e0969260449260e01c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000008254161790550135910155612df1565b611b99565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011760005582611a23565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156119ef5750600160ff8216146119ef565b50600160ff8216106119e8565b346102ff5760006003193601126102ff5760207fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f154604051908152f35b346102ff5760206003193601126102ff576040517f7667180800000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561092b576000916120ed575b507fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f45460ff16156120e457611fdd7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f5545b600435613941565b907f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f19283549361202d613878565b927fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f2549260018101938482116107af5787612071848997889461032d9c868c6132c9565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d09548310918291826120da575b5050156120ae575050505561370d565b9091929350156120c1575b50505061370d565b6120d0916060850151866136c1565b90558380806120b9565b119050858a61209e565b611fdd81611fd5565b90506020813d8211612116575b8161210760209383612d98565b810103126102ff575181611f84565b3d91506120fa565b346102ff5760006003193601126102ff57602073ffffffffffffffffffffffffffffffffffffffff7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d075416604051908152f35b346102ff576020806003193601126102ff576004359061218f614120565b604051917f7667180800000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff928281600481877f0000000000000000000000000000000000000000000000000000000000000000165afa90811561092b57600091612505575b507fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d20547f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f45460ff16156123925750507fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f55490600282018092116107af57111561232857610e4e817f430648de173157e069201c943adb2d4e340e7cf5b27b1b09c9cb852f03d63b56947fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4ee6122fc838254612d53565b90557f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d07541633906137df565b6084826040519062461bcd60e51b82526004820152602d60248201527f43616e2774207769746864726177206265666f726520322065706f636873206160448201527f66746572206465616c20656e64000000000000000000000000000000000000006064820152fd5b61239a613878565b917fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1916123ee818385547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f2549089896132c9565b606084016123fd878251612d53565b81527f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821682036107af576124567f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0a548360011b61312a565b81511061249b57937f430648de173157e069201c943adb2d4e340e7cf5b27b1b09c9cb852f03d63b569893610e1b61249694610e4e98948a9851866136c1565b6113f9565b6084886040519062461bcd60e51b82526004820152602c60248201527f467265652062616c616e6365206e6565647320746f20636f766572206d696e6960448201527f6d756d20322065706f63687300000000000000000000000000000000000000006064820152fd5b90508281813d831161252b575b61251c8183612d98565b810103126102ff575184612205565b503d612512565b346102ff5760006003193601126102ff5760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0954604051908152f35b346102ff5760206003193601126102ff576004356000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d276020526020604060002054604051908152f35b346102ff5760006003193601126102ff5760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0a54604051908152f35b346102ff576020806003193601126102ff576004356000527fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f381526040600020604051907f76671808000000000000000000000000000000000000000000000000000000008252828260048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa91821561092b57600092612771575b50906113a161098f9261139b7fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d205491600160a06127657f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c549761275d89612710613878565b987fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f25490858c6132c9565b845490612d53565b94015191015490612d53565b91508282813d831161279b575b6127888183612d98565b810103126102ff579051906113a16126ab565b503d61277e565b346102ff5760406003193601126102ff576127bb614120565b61032d612e32565b346102ff5760006003193601126102ff5760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0454604051908152f35b346102ff576020806003193601126102ff577fffffffffffffffffffffffffffffffffffffffff00000000000000000000000061283b612cf7565b612843614120565b60601b1690816000527f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d1291828252604060002060016040519161288583612d60565b80548352015483820190815261289b8383613ce3565b156129835781518015908161295a575b8251918215612932575b1561291c575b5050519081612907575b505060005252600060016040822082815501557f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d116129038154613916565b9055005b519060005283835260406000205583806128c5565b60005285855260016040600020015585806128bb565b817f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d10556128b5565b82517f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0f556128ab565b6064846040519062461bcd60e51b82526004820152601260248201527f4b657920646f6573206e6f7420657869737400000000000000000000000000006044820152fd5b346102ff5760006003193601126102ff5760207fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2054604051908152f35b346102ff5760006003193601126102ff57612a1d614120565b612a25613878565b6040517f7667180800000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561092b57600091612bba575b508091817fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f191612b3d82845492612b387fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f2547fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d20547f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c54918786866132c9565b61370d565b11612bb2575b507fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f555005b558082612b43565b90506020813d8211612be3575b81612bd460209383612d98565b810103126102ff575182612a99565b3d9150612bc7565b346102ff5760206003193601126102ff57602080917fffffffffffffffffffffffffffffffffffffffff000000000000000000000000612c29612cf7565b60601b1690816000527f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d128352604060002090612c6481612d60565b6001825492838352015493849101521591821592612ced575b508115612cc2575b8115612c97575b506040519015158152f35b90507f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d10541482612c8c565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0f5481149150612c85565b1515915083612c7d565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036102ff57565b60031115612d2457565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b919082039182116107af57565b6040810190811067ffffffffffffffff82111761088957604052565b60c0810190811067ffffffffffffffff82111761088957604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761088957604052565b67ffffffffffffffff81116108895760051b60200190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107af5760010190565b8051821015611dd65760209160051b010190565b6004357fffffffff000000000000000000000000000000000000000000000000000000008116908181036102ff577fc820a66d3bdd50a45cf12cda6dc8ec9e94fb5123edd7da736eea18316f8523a0916040917f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d059060e01c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000825416179055602435807f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d065582519182526020820152a1565b612f0d81612d1a565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0e9060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008354169116179055565b15612f6357565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b60ff7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f45416613125576040517f7667180800000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561092b576000916130f1575b507fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f154907fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d20547f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0954116000146130e1575050600090565b11156130ec57600090565b600190565b906020823d821161311d575b8161310a60209383612d98565b8101031261311a5750513861306a565b80fd5b3d91506130fd565b600290565b818102929181159184041417156107af57565b6040517f7667180800000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561092b5760009161328b575b507fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1548111613285576132829061139b61325a6132327fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4ee54937fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f25490612d53565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c549061312a565b7fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d20549061312a565b90565b50600090565b906020823d82116132b4575b816132a460209383612d98565b8101031261311a575051386131b1565b3d9150613297565b919082018092116107af57565b91939092948484118080916133b2575b156133325750916132fb60a0926113a1613327956113a1899a61332d9a612d53565b6060820161330a828251612d53565b905261331b608083019182516132bc565b90520193845192612d53565b906132bc565b90525b565b8091939695816133a7575b501561335a5750505061332760a061332d93940193845192612d53565b9291921561336a575b5050505050565b6113a16080936113a161339b9661338095612d53565b9260608101613390858251612d53565b9052019182516132bc565b90523880808080613363565b90508510153861333d565b508686116132d9565b9290604051927f23b872dd00000000000000000000000000000000000000000000000000000000602085015273ffffffffffffffffffffffffffffffffffffffff809216602485015216604483015260648201526064815260a081019181831067ffffffffffffffff84111761088957613330926040525b73ffffffffffffffffffffffffffffffffffffffff169060405161345681612d60565b6020928382527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564848301526000808486829651910182855af13d156135c9573d9167ffffffffffffffff831161359c57906134ef939291604051926134e2887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160185612d98565b83523d868885013e6135d3565b805191821591848315613574575b50505090501561350a5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b9193818094500103126135985782015190811515820361311a5750803880846134fd565b5080fd5b6024857f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b906134ef92916060915b9192901561363457508151156135e7575090565b3b156135f05790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156136475750805190602001fd5b6040519062461bcd60e51b825281602080600483015282519283602484015260005b8481106136aa575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201613669565b91926136cd919361312a565b80156136de576132829204906132bc565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b805160608201518091036137b7575b506020810151608082015180910361378f575b5060a06040820151910151809103613767575b507fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f255565b7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f05538613742565b7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4ef553861372f565b7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4ee553861371c565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff92909216602483015260448083019390935291815261333091613841606483612d98565b613433565b6040519061385382612d7c565b8160a06000918281528260208201528260408201528260608201528260808201520152565b613880613846565b507fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4ee547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4ef547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f05490604051926138f584612d7c565b8084528160208501528260408501526060840152608083015260a082015290565b80156107af577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b91906000928084526020907fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d22825273ffffffffffffffffffffffffffffffffffffffff92604090846003838920015416948515613ca057338614908115613c73575b5015613c0a57613a0a7fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d209586549089527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d218652838920613a038154613916565b9055613916565b80955560028101809111613bdd578287527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d278452818720557fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2695868452818120966001835198613a798a612d60565b80548a52015497858101988952613a908582613d63565b15613b9a577f319861d91651b1d776940afecf33ec848245a2b1fb1854613bbe2a367b54f792969798815180159081613b71575b8251918215613b49575b15613b36575b5050519081613b24575b50508382528452600182822082815501557fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d25613b1a8154613916565b905551908152a190565b51908352818652838320553880613ade565b8552838852600186862001553880613ad4565b817fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2455613ace565b82517fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2355613ac4565b60648685519062461bcd60e51b82526004820152601260248201527f4b657920646f6573206e6f7420657869737400000000000000000000000000006044820152fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b60848483519062461bcd60e51b82526004820152602d60248201527f4f6e6c792070726f7669646572206f72206465616c206f776e65722063616e2060448201527f72656d6f766520776f726b6572000000000000000000000000000000000000006064820152fd5b90507f612e56b0fc389e6dab6fa70e140af078f831069f9c4d9558e645bdefbbc8112354163314386139a3565b60648584519062461bcd60e51b82526004820152601560248201527f436f6d70757465556e6974206e6f7420666f756e6400000000000000000000006044820152fd5b9081511591821592613d55575b508115613d2a575b8115613d02575090565b90507f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d10541490565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0f5481149150613cf8565b602001511515915038613cf0565b9081511591821592613dd5575b508115613daa575b8115613d82575090565b90507fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d24541490565b7fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d235481149150613d78565b602001511515915038613d70565b8015613f205760008181527f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d129081602052613e3b8360408320600160405191613e2b83612d60565b8054835201546020820152613ce3565b613edc577f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d10918254907f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d11613e8f8154612df1565b9055848215613eb4579060409392916001955585835260205280838320558152200155565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0f5550505055565b606460405162461bcd60e51b815260206004820152601260248201527f4b657920616c72656164792065786973747300000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601260248201527f4b65792063616e6e6f74206265205a45524f00000000000000000000000000006044820152fd5b8015613f205760008181527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d269081602052613fbc8360408320600160405191613fac83612d60565b8054835201546020820152613d63565b613edc577fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d24918254907fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d256140108154612df1565b9055848215614035579060409392916001955585835260205280838320558152200155565b7fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d235550505055565b73ffffffffffffffffffffffffffffffffffffffff8091169081156140ef577f612e56b0fc389e6dab6fa70e140af078f831069f9c4d9558e645bdefbbc81123805490837fffffffffffffffffffffffff00000000000000000000000000000000000000008316179055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b60246040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152fd5b73ffffffffffffffffffffffffffffffffffffffff7f612e56b0fc389e6dab6fa70e140af078f831069f9c4d9558e645bdefbbc811235416330361416057565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fdfea2646970667358221220a314e767c6ba4fcdec33a5dabaa71f02e8763f122afb394b663a9316686247c264736f6c63430008130033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 371,
        "contract": "contracts/deal/Deal.sol:Deal",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 374,
        "contract": "contracts/deal/Deal.sol:Deal",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9328,
        "contract": "contracts/deal/Deal.sol:Deal",
        "label": "_storage",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(OwnableStorage)9325_storage"
      },
      {
        "astId": 3476,
        "contract": "contracts/deal/Deal.sol:Deal",
        "label": "_storage",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(ConfigStorage)3473_storage"
      },
      {
        "astId": 5377,
        "contract": "contracts/deal/Deal.sol:Deal",
        "label": "_storage",
        "offset": 0,
        "slot": "17",
        "type": "t_struct(WorkerManagerStorage)5374_storage"
      },
      {
        "astId": 4043,
        "contract": "contracts/deal/Deal.sol:Deal",
        "label": "_storage",
        "offset": 0,
        "slot": "25",
        "type": "t_struct(DealStorage)4040_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(CIDV1)5857_storage)dyn_storage": {
        "base": "t_struct(CIDV1)5857_storage",
        "encoding": "dynamic_array",
        "label": "struct CIDV1[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IERC20)2321": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(AccessType)5865": {
        "encoding": "inplace",
        "label": "enum IConfig.AccessType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(ComputeProviderInfo)5341_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct WorkerManager.ComputeProviderInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ComputeProviderInfo)5341_storage"
      },
      "t_mapping(t_bytes32,t_struct(ComputeUnit)6075_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IWorkerManager.ComputeUnit)",
        "numberOfBytes": "32",
        "value": "t_struct(ComputeUnit)6075_storage"
      },
      "t_mapping(t_bytes32,t_struct(ComputeUnitPaymentInfo)4007_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Deal.ComputeUnitPaymentInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ComputeUnitPaymentInfo)4007_storage"
      },
      "t_mapping(t_bytes32,t_struct(Element)8913_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LinkedListWithUniqueKeys.Element)",
        "numberOfBytes": "32",
        "value": "t_struct(Element)8913_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Bytes32List)8925_storage": {
        "encoding": "inplace",
        "label": "struct LinkedListWithUniqueKeys.Bytes32List",
        "members": [
          {
            "astId": 8915,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "_first",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 8917,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "_last",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 8919,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "_length",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8924,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "_elements",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_struct(Element)8913_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(CIDV1)5857_storage": {
        "encoding": "inplace",
        "label": "struct CIDV1",
        "members": [
          {
            "astId": 5854,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "prefixes",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes4"
          },
          {
            "astId": 5856,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "hash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ComputeProviderInfo)5341_storage": {
        "encoding": "inplace",
        "label": "struct WorkerManager.ComputeProviderInfo",
        "members": [
          {
            "astId": 5337,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "computeUnitCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5340,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "computeUnitsIds",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Bytes32List)8925_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(ComputeUnit)6075_storage": {
        "encoding": "inplace",
        "label": "struct IWorkerManager.ComputeUnit",
        "members": [
          {
            "astId": 6064,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 6066,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "peerId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 6068,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "workerId",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 6070,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "owner",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 6072,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "collateral",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6074,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "created",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ComputeUnitPaymentInfo)4007_storage": {
        "encoding": "inplace",
        "label": "struct Deal.ComputeUnitPaymentInfo",
        "members": [
          {
            "astId": 4004,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "startedEpoch",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4006,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "gapsDelta",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ConfigStorage)3473_storage": {
        "encoding": "inplace",
        "label": "struct Config.ConfigStorage",
        "members": [
          {
            "astId": 3446,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "creationBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3449,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "appCID",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(CIDV1)5857_storage"
          },
          {
            "astId": 3452,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "paymentToken",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC20)2321"
          },
          {
            "astId": 3454,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "collateralPerWorker",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3456,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "minWorkers",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3458,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "targetWorkers",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3460,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "maxWorkersPerProvider",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 3462,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "pricePerWorkerEpoch",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 3466,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "effectors",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_struct(CIDV1)5857_storage)dyn_storage"
          },
          {
            "astId": 3469,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "accessType",
            "offset": 0,
            "slot": "10",
            "type": "t_enum(AccessType)5865"
          },
          {
            "astId": 3472,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "accessList",
            "offset": 0,
            "slot": "11",
            "type": "t_struct(Bytes32List)8925_storage"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(DealStorage)4040_storage": {
        "encoding": "inplace",
        "label": "struct Deal.DealStorage",
        "members": [
          {
            "astId": 4022,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "totalBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4024,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "lockedBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4026,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "gapsEpochCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4028,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "maxPaidEpoch",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4030,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "lastCommitedEpoch",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4035,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "cUnitPaymentInfo",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_bytes32,t_struct(ComputeUnitPaymentInfo)4007_storage)"
          },
          {
            "astId": 4037,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "isEnded",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 4039,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "endedEpoch",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Element)8913_storage": {
        "encoding": "inplace",
        "label": "struct LinkedListWithUniqueKeys.Element",
        "members": [
          {
            "astId": 8910,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "prev",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 8912,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "next",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(OwnableStorage)9325_storage": {
        "encoding": "inplace",
        "label": "struct Ownable.OwnableStorage",
        "members": [
          {
            "astId": 9324,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(WorkerManagerStorage)5374_storage": {
        "encoding": "inplace",
        "label": "struct WorkerManager.WorkerManagerStorage",
        "members": [
          {
            "astId": 5356,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "computeUnitCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5361,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "computeProviderInfo",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(ComputeProviderInfo)5341_storage)"
          },
          {
            "astId": 5366,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "computeUnitById",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_struct(ComputeUnit)6075_storage)"
          },
          {
            "astId": 5369,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "computeUnitsIdsList",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Bytes32List)8925_storage"
          },
          {
            "astId": 5373,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "collateralWithdrawEpochByComputeUnitId",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}